-- --------------------------------------------------------
-- Host:                         103.195.185.187
-- Server version:               5.7.23-23 - Percona Server (GPL), Release 23, Revision 500fcf5
-- Server OS:                    Linux
-- HeidiSQL Version:             12.1.0.6537
-- --------------------------------------------------------

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET NAMES utf8 */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;


-- Dumping database structure for fullsm3q_askme
CREATE DATABASE IF NOT EXISTS `fullsm3q_askme` /*!40100 DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci */;
USE `fullsm3q_askme`;

-- Dumping structure for table fullsm3q_askme.blobs
CREATE TABLE IF NOT EXISTS `blobs` (
  `blobid` bigint(20) unsigned NOT NULL,
  `format` varchar(20) CHARACTER SET ascii NOT NULL,
  `content` mediumblob,
  `filename` varchar(255) DEFAULT NULL,
  `userid` int(10) unsigned DEFAULT NULL,
  `cookieid` bigint(20) unsigned DEFAULT NULL,
  `createip` varbinary(16) DEFAULT NULL,
  `created` datetime DEFAULT NULL,
  PRIMARY KEY (`blobid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table fullsm3q_askme.blobs: ~0 rows (approximately)
DELETE FROM `blobs`;

-- Dumping structure for table fullsm3q_askme.cache
CREATE TABLE IF NOT EXISTS `cache` (
  `type` char(8) CHARACTER SET ascii NOT NULL,
  `cacheid` bigint(20) unsigned NOT NULL DEFAULT '0',
  `content` mediumblob NOT NULL,
  `created` datetime NOT NULL,
  `lastread` datetime NOT NULL,
  PRIMARY KEY (`type`,`cacheid`),
  KEY `lastread` (`lastread`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table fullsm3q_askme.cache: ~0 rows (approximately)
DELETE FROM `cache`;

-- Dumping structure for table fullsm3q_askme.categories
CREATE TABLE IF NOT EXISTS `categories` (
  `categoryid` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `parentid` int(10) unsigned DEFAULT NULL,
  `title` varchar(80) NOT NULL,
  `tags` varchar(200) NOT NULL,
  `content` varchar(800) NOT NULL DEFAULT '',
  `qcount` int(10) unsigned NOT NULL DEFAULT '0',
  `position` smallint(5) unsigned NOT NULL,
  `backpath` varchar(804) NOT NULL DEFAULT '',
  PRIMARY KEY (`categoryid`),
  UNIQUE KEY `parentid` (`parentid`,`tags`),
  UNIQUE KEY `parentid_2` (`parentid`,`position`),
  KEY `backpath` (`backpath`(200))
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table fullsm3q_askme.categories: ~0 rows (approximately)
DELETE FROM `categories`;

-- Dumping structure for table fullsm3q_askme.categorymetas
CREATE TABLE IF NOT EXISTS `categorymetas` (
  `categoryid` int(10) unsigned NOT NULL,
  `title` varchar(40) NOT NULL,
  `content` varchar(8000) NOT NULL,
  PRIMARY KEY (`categoryid`,`title`),
  CONSTRAINT `categorymetas_ibfk_1` FOREIGN KEY (`categoryid`) REFERENCES `categories` (`categoryid`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table fullsm3q_askme.categorymetas: ~0 rows (approximately)
DELETE FROM `categorymetas`;

-- Dumping structure for table fullsm3q_askme.contentwords
CREATE TABLE IF NOT EXISTS `contentwords` (
  `postid` int(10) unsigned NOT NULL,
  `wordid` int(10) unsigned NOT NULL,
  `count` tinyint(3) unsigned NOT NULL,
  `type` enum('Q','A','C','NOTE') NOT NULL,
  `questionid` int(10) unsigned NOT NULL,
  KEY `postid` (`postid`),
  KEY `wordid` (`wordid`),
  CONSTRAINT `contentwords_ibfk_1` FOREIGN KEY (`postid`) REFERENCES `posts` (`postid`) ON DELETE CASCADE,
  CONSTRAINT `contentwords_ibfk_2` FOREIGN KEY (`wordid`) REFERENCES `words` (`wordid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table fullsm3q_askme.contentwords: ~1,360 rows (approximately)
DELETE FROM `contentwords`;
INSERT INTO `contentwords` (`postid`, `wordid`, `count`, `type`, `questionid`) VALUES
	(2, 3, 1, 'A', 1),
	(2, 7, 1, 'A', 1),
	(2, 8, 1, 'A', 1),
	(2, 9, 1, 'A', 1),
	(2, 10, 2, 'A', 1),
	(2, 11, 1, 'A', 1),
	(2, 4, 2, 'A', 1),
	(2, 12, 1, 'A', 1),
	(2, 13, 3, 'A', 1),
	(2, 14, 3, 'A', 1),
	(2, 15, 1, 'A', 1),
	(2, 16, 1, 'A', 1),
	(2, 17, 1, 'A', 1),
	(2, 18, 2, 'A', 1),
	(2, 19, 1, 'A', 1),
	(2, 20, 1, 'A', 1),
	(2, 21, 1, 'A', 1),
	(2, 22, 1, 'A', 1),
	(2, 23, 1, 'A', 1),
	(2, 24, 4, 'A', 1),
	(2, 25, 5, 'A', 1),
	(2, 26, 1, 'A', 1),
	(2, 27, 1, 'A', 1),
	(2, 28, 1, 'A', 1),
	(2, 29, 3, 'A', 1),
	(2, 30, 1, 'A', 1),
	(2, 31, 1, 'A', 1),
	(2, 32, 1, 'A', 1),
	(2, 5, 1, 'A', 1),
	(2, 6, 1, 'A', 1),
	(2, 33, 2, 'A', 1),
	(2, 34, 1, 'A', 1),
	(2, 35, 1, 'A', 1),
	(2, 36, 1, 'A', 1),
	(2, 37, 2, 'A', 1),
	(2, 38, 1, 'A', 1),
	(2, 39, 1, 'A', 1),
	(2, 40, 1, 'A', 1),
	(2, 41, 1, 'A', 1),
	(2, 2, 1, 'A', 1),
	(2, 42, 1, 'A', 1),
	(2, 43, 1, 'A', 1),
	(2, 44, 1, 'A', 1),
	(2, 45, 1, 'A', 1),
	(2, 46, 1, 'A', 1),
	(2, 47, 1, 'A', 1),
	(2, 48, 1, 'A', 1),
	(4, 3, 1, 'A', 3),
	(4, 53, 1, 'A', 3),
	(4, 54, 1, 'A', 3),
	(4, 55, 1, 'A', 3),
	(4, 56, 1, 'A', 3),
	(4, 33, 1, 'A', 3),
	(4, 57, 1, 'A', 3),
	(4, 58, 1, 'A', 3),
	(4, 59, 1, 'A', 3),
	(4, 60, 1, 'A', 3),
	(4, 61, 1, 'A', 3),
	(4, 62, 1, 'A', 3),
	(4, 30, 2, 'A', 3),
	(4, 63, 1, 'A', 3),
	(4, 64, 1, 'A', 3),
	(4, 14, 1, 'A', 3),
	(4, 2, 1, 'A', 3),
	(4, 16, 1, 'A', 3),
	(4, 4, 1, 'A', 3),
	(4, 50, 1, 'A', 3),
	(6, 68, 5, 'A', 5),
	(6, 69, 7, 'A', 5),
	(6, 2, 4, 'A', 5),
	(6, 25, 19, 'A', 5),
	(6, 73, 2, 'A', 5),
	(6, 74, 3, 'A', 5),
	(6, 13, 6, 'A', 5),
	(6, 75, 5, 'A', 5),
	(6, 76, 1, 'A', 5),
	(6, 24, 3, 'A', 5),
	(6, 77, 1, 'A', 5),
	(6, 78, 1, 'A', 5),
	(6, 79, 7, 'A', 5),
	(6, 30, 6, 'A', 5),
	(6, 14, 4, 'A', 5),
	(6, 80, 1, 'A', 5),
	(6, 18, 1, 'A', 5),
	(6, 81, 1, 'A', 5),
	(6, 82, 1, 'A', 5),
	(6, 67, 3, 'A', 5),
	(6, 16, 1, 'A', 5),
	(6, 83, 2, 'A', 5),
	(6, 3, 5, 'A', 5),
	(6, 84, 1, 'A', 5),
	(6, 85, 5, 'A', 5),
	(6, 36, 5, 'A', 5),
	(6, 86, 3, 'A', 5),
	(6, 42, 2, 'A', 5),
	(6, 87, 1, 'A', 5),
	(6, 88, 1, 'A', 5),
	(6, 89, 3, 'A', 5),
	(6, 90, 1, 'A', 5),
	(6, 91, 1, 'A', 5),
	(6, 92, 2, 'A', 5),
	(6, 45, 2, 'A', 5),
	(6, 71, 1, 'A', 5),
	(6, 72, 1, 'A', 5),
	(6, 8, 3, 'A', 5),
	(6, 93, 3, 'A', 5),
	(6, 94, 1, 'A', 5),
	(6, 4, 1, 'A', 5),
	(6, 31, 2, 'A', 5),
	(6, 95, 1, 'A', 5),
	(6, 96, 2, 'A', 5),
	(6, 97, 1, 'A', 5),
	(6, 98, 1, 'A', 5),
	(6, 99, 1, 'A', 5),
	(6, 100, 1, 'A', 5),
	(6, 10, 6, 'A', 5),
	(6, 101, 1, 'A', 5),
	(6, 19, 1, 'A', 5),
	(6, 51, 3, 'A', 5),
	(6, 102, 2, 'A', 5),
	(6, 103, 1, 'A', 5),
	(6, 104, 1, 'A', 5),
	(6, 105, 1, 'A', 5),
	(6, 106, 3, 'A', 5),
	(6, 107, 2, 'A', 5),
	(6, 108, 2, 'A', 5),
	(6, 109, 3, 'A', 5),
	(6, 60, 4, 'A', 5),
	(6, 110, 5, 'A', 5),
	(6, 111, 2, 'A', 5),
	(6, 112, 1, 'A', 5),
	(6, 113, 1, 'A', 5),
	(6, 114, 1, 'A', 5),
	(6, 115, 1, 'A', 5),
	(6, 116, 1, 'A', 5),
	(6, 117, 1, 'A', 5),
	(6, 118, 1, 'A', 5),
	(6, 119, 2, 'A', 5),
	(6, 120, 1, 'A', 5),
	(6, 121, 3, 'A', 5),
	(6, 122, 1, 'A', 5),
	(6, 123, 1, 'A', 5),
	(6, 124, 1, 'A', 5),
	(6, 125, 1, 'A', 5),
	(6, 126, 1, 'A', 5),
	(6, 44, 1, 'A', 5),
	(6, 127, 1, 'A', 5),
	(6, 128, 1, 'A', 5),
	(8, 14, 3, 'A', 7),
	(8, 2, 6, 'A', 7),
	(8, 16, 3, 'A', 7),
	(8, 132, 1, 'A', 7),
	(8, 133, 2, 'A', 7),
	(8, 93, 4, 'A', 7),
	(8, 134, 1, 'A', 7),
	(8, 13, 4, 'A', 7),
	(8, 3, 5, 'A', 7),
	(8, 25, 6, 'A', 7),
	(8, 130, 1, 'A', 7),
	(8, 51, 4, 'A', 7),
	(8, 52, 4, 'A', 7),
	(8, 131, 4, 'A', 7),
	(8, 7, 4, 'A', 7),
	(8, 127, 3, 'A', 7),
	(8, 135, 1, 'A', 7),
	(8, 10, 1, 'A', 7),
	(8, 136, 1, 'A', 7),
	(8, 137, 2, 'A', 7),
	(8, 30, 2, 'A', 7),
	(8, 35, 2, 'A', 7),
	(8, 138, 2, 'A', 7),
	(8, 88, 1, 'A', 7),
	(8, 139, 1, 'A', 7),
	(8, 140, 1, 'A', 7),
	(8, 84, 1, 'A', 7),
	(8, 124, 1, 'A', 7),
	(8, 141, 2, 'A', 7),
	(8, 4, 3, 'A', 7),
	(8, 142, 2, 'A', 7),
	(8, 143, 2, 'A', 7),
	(8, 144, 1, 'A', 7),
	(8, 74, 1, 'A', 7),
	(8, 54, 3, 'A', 7),
	(8, 55, 3, 'A', 7),
	(8, 56, 3, 'A', 7),
	(8, 145, 1, 'A', 7),
	(8, 60, 1, 'A', 7),
	(8, 61, 1, 'A', 7),
	(8, 58, 1, 'A', 7),
	(8, 57, 1, 'A', 7),
	(8, 63, 1, 'A', 7),
	(8, 98, 1, 'A', 7),
	(8, 146, 1, 'A', 7),
	(8, 42, 1, 'A', 7),
	(8, 147, 1, 'A', 7),
	(8, 50, 1, 'A', 7),
	(8, 148, 1, 'A', 7),
	(8, 24, 2, 'A', 7),
	(8, 149, 1, 'A', 7),
	(8, 150, 1, 'A', 7),
	(8, 151, 1, 'A', 7),
	(8, 152, 1, 'A', 7),
	(8, 125, 1, 'A', 7),
	(10, 154, 4, 'A', 9),
	(10, 2, 4, 'A', 9),
	(10, 40, 2, 'A', 9),
	(10, 4, 2, 'A', 9),
	(10, 155, 3, 'A', 9),
	(10, 7, 2, 'A', 9),
	(10, 156, 4, 'A', 9),
	(10, 3, 5, 'A', 9),
	(10, 8, 2, 'A', 9),
	(10, 122, 1, 'A', 9),
	(10, 157, 1, 'A', 9),
	(10, 158, 1, 'A', 9),
	(10, 159, 1, 'A', 9),
	(10, 99, 1, 'A', 9),
	(10, 43, 2, 'A', 9),
	(10, 6, 1, 'A', 9),
	(10, 79, 2, 'A', 9),
	(10, 35, 1, 'A', 9),
	(10, 37, 1, 'A', 9),
	(10, 10, 3, 'A', 9),
	(10, 25, 5, 'A', 9),
	(10, 34, 1, 'A', 9),
	(10, 14, 3, 'A', 9),
	(10, 160, 1, 'A', 9),
	(10, 161, 1, 'A', 9),
	(10, 24, 2, 'A', 9),
	(10, 87, 1, 'A', 9),
	(10, 162, 2, 'A', 9),
	(10, 163, 2, 'A', 9),
	(10, 164, 1, 'A', 9),
	(10, 165, 1, 'A', 9),
	(10, 166, 1, 'A', 9),
	(10, 53, 1, 'A', 9),
	(10, 167, 1, 'A', 9),
	(10, 74, 2, 'A', 9),
	(10, 38, 1, 'A', 9),
	(10, 168, 1, 'A', 9),
	(10, 144, 1, 'A', 9),
	(10, 72, 1, 'A', 9),
	(10, 30, 1, 'A', 9),
	(10, 23, 1, 'A', 9),
	(10, 169, 1, 'A', 9),
	(10, 170, 1, 'A', 9),
	(10, 171, 1, 'A', 9),
	(10, 172, 1, 'A', 9),
	(10, 13, 1, 'A', 9),
	(10, 173, 1, 'A', 9),
	(10, 174, 1, 'A', 9),
	(10, 175, 1, 'A', 9),
	(12, 162, 7, 'A', 11),
	(12, 99, 2, 'A', 11),
	(12, 178, 2, 'A', 11),
	(12, 179, 1, 'A', 11),
	(12, 30, 3, 'A', 11),
	(12, 180, 1, 'A', 11),
	(12, 24, 1, 'A', 11),
	(12, 87, 2, 'A', 11),
	(12, 88, 2, 'A', 11),
	(12, 181, 1, 'A', 11),
	(12, 182, 1, 'A', 11),
	(12, 3, 3, 'A', 11),
	(12, 183, 1, 'A', 11),
	(12, 18, 1, 'A', 11),
	(12, 29, 1, 'A', 11),
	(12, 184, 1, 'A', 11),
	(12, 25, 5, 'A', 11),
	(12, 185, 2, 'A', 11),
	(12, 74, 6, 'A', 11),
	(12, 35, 4, 'A', 11),
	(12, 177, 2, 'A', 11),
	(12, 14, 1, 'A', 11),
	(12, 186, 1, 'A', 11),
	(12, 187, 1, 'A', 11),
	(12, 188, 1, 'A', 11),
	(12, 124, 2, 'A', 11),
	(12, 189, 1, 'A', 11),
	(12, 190, 1, 'A', 11),
	(12, 191, 1, 'A', 11),
	(12, 192, 2, 'A', 11),
	(12, 193, 1, 'A', 11),
	(12, 2, 2, 'A', 11),
	(12, 194, 1, 'A', 11),
	(12, 133, 1, 'A', 11),
	(12, 176, 1, 'A', 11),
	(12, 127, 1, 'A', 11),
	(12, 161, 1, 'A', 11),
	(12, 151, 1, 'A', 11),
	(12, 138, 1, 'A', 11),
	(12, 69, 1, 'A', 11),
	(12, 195, 1, 'A', 11),
	(12, 196, 1, 'A', 11),
	(12, 197, 1, 'A', 11),
	(12, 4, 1, 'A', 11),
	(12, 198, 1, 'A', 11),
	(12, 199, 1, 'A', 11),
	(12, 200, 1, 'A', 11),
	(12, 201, 1, 'A', 11),
	(12, 16, 1, 'A', 11),
	(12, 202, 1, 'A', 11),
	(12, 10, 1, 'A', 11),
	(12, 203, 1, 'A', 11),
	(12, 204, 1, 'A', 11),
	(12, 205, 1, 'A', 11),
	(12, 206, 1, 'A', 11),
	(12, 207, 1, 'A', 11),
	(12, 208, 1, 'A', 11),
	(12, 209, 1, 'A', 11),
	(12, 8, 1, 'A', 11),
	(12, 149, 1, 'A', 11),
	(12, 210, 1, 'A', 11),
	(12, 36, 1, 'A', 11),
	(12, 211, 1, 'A', 11),
	(12, 212, 1, 'A', 11),
	(14, 217, 2, 'A', 13),
	(14, 96, 7, 'A', 13),
	(14, 99, 4, 'A', 13),
	(14, 220, 2, 'A', 13),
	(14, 13, 2, 'A', 13),
	(14, 221, 1, 'A', 13),
	(14, 88, 2, 'A', 13),
	(14, 95, 3, 'A', 13),
	(14, 25, 13, 'A', 13),
	(14, 97, 3, 'A', 13),
	(14, 10, 1, 'A', 13),
	(14, 105, 6, 'A', 13),
	(14, 222, 1, 'A', 13),
	(14, 123, 2, 'A', 13),
	(14, 223, 1, 'A', 13),
	(14, 30, 4, 'A', 13),
	(14, 224, 3, 'A', 13),
	(14, 149, 2, 'A', 13),
	(14, 225, 1, 'A', 13),
	(14, 226, 1, 'A', 13),
	(14, 74, 4, 'A', 13),
	(14, 157, 1, 'A', 13),
	(14, 51, 1, 'A', 13),
	(14, 227, 2, 'A', 13),
	(14, 228, 1, 'A', 13),
	(14, 24, 3, 'A', 13),
	(14, 14, 2, 'A', 13),
	(14, 229, 1, 'A', 13),
	(14, 19, 3, 'A', 13),
	(14, 230, 1, 'A', 13),
	(14, 140, 1, 'A', 13),
	(14, 85, 2, 'A', 13),
	(14, 44, 2, 'A', 13),
	(14, 231, 1, 'A', 13),
	(14, 232, 1, 'A', 13),
	(14, 42, 1, 'A', 13),
	(14, 188, 2, 'A', 13),
	(14, 133, 1, 'A', 13),
	(14, 233, 1, 'A', 13),
	(14, 2, 3, 'A', 13),
	(14, 234, 1, 'A', 13),
	(14, 18, 1, 'A', 13),
	(14, 31, 1, 'A', 13),
	(14, 40, 2, 'A', 13),
	(14, 36, 2, 'A', 13),
	(14, 235, 1, 'A', 13),
	(14, 81, 2, 'A', 13),
	(14, 236, 1, 'A', 13),
	(14, 237, 1, 'A', 13),
	(14, 238, 1, 'A', 13),
	(14, 239, 2, 'A', 13),
	(14, 107, 4, 'A', 13),
	(14, 116, 2, 'A', 13),
	(14, 240, 2, 'A', 13),
	(14, 63, 2, 'A', 13),
	(14, 241, 2, 'A', 13),
	(14, 60, 2, 'A', 13),
	(14, 242, 2, 'A', 13),
	(14, 219, 3, 'A', 13),
	(14, 243, 1, 'A', 13),
	(14, 244, 1, 'A', 13),
	(14, 4, 3, 'A', 13),
	(14, 245, 2, 'A', 13),
	(14, 246, 1, 'A', 13),
	(14, 21, 1, 'A', 13),
	(14, 247, 1, 'A', 13),
	(14, 35, 1, 'A', 13),
	(14, 248, 1, 'A', 13),
	(14, 249, 1, 'A', 13),
	(14, 218, 3, 'A', 13),
	(14, 250, 1, 'A', 13),
	(14, 251, 1, 'A', 13),
	(14, 252, 1, 'A', 13),
	(14, 120, 1, 'A', 13),
	(14, 150, 1, 'A', 13),
	(14, 253, 1, 'A', 13),
	(14, 254, 1, 'A', 13),
	(14, 108, 1, 'A', 13),
	(16, 257, 1, 'A', 15),
	(16, 99, 1, 'A', 15),
	(16, 258, 1, 'A', 15),
	(16, 255, 3, 'A', 15),
	(16, 256, 1, 'A', 15),
	(16, 76, 3, 'A', 15),
	(16, 24, 5, 'A', 15),
	(16, 25, 6, 'A', 15),
	(16, 96, 1, 'A', 15),
	(16, 10, 1, 'A', 15),
	(16, 3, 1, 'A', 15),
	(16, 93, 2, 'A', 15),
	(16, 259, 1, 'A', 15),
	(16, 260, 1, 'A', 15),
	(16, 261, 2, 'A', 15),
	(16, 262, 1, 'A', 15),
	(16, 263, 1, 'A', 15),
	(16, 14, 8, 'A', 15),
	(16, 264, 1, 'A', 15),
	(16, 85, 5, 'A', 15),
	(16, 265, 1, 'A', 15),
	(16, 4, 3, 'A', 15),
	(16, 266, 1, 'A', 15),
	(16, 267, 1, 'A', 15),
	(16, 74, 1, 'A', 15),
	(16, 218, 1, 'A', 15),
	(16, 268, 1, 'A', 15),
	(16, 16, 1, 'A', 15),
	(16, 36, 4, 'A', 15),
	(16, 269, 2, 'A', 15),
	(16, 84, 1, 'A', 15),
	(16, 42, 1, 'A', 15),
	(16, 217, 1, 'A', 15),
	(16, 133, 4, 'A', 15),
	(16, 101, 1, 'A', 15),
	(16, 51, 1, 'A', 15),
	(16, 31, 4, 'A', 15),
	(16, 88, 1, 'A', 15),
	(16, 247, 1, 'A', 15),
	(16, 270, 1, 'A', 15),
	(16, 18, 1, 'A', 15),
	(16, 55, 1, 'A', 15),
	(16, 271, 1, 'A', 15),
	(16, 2, 3, 'A', 15),
	(16, 272, 1, 'A', 15),
	(16, 273, 1, 'A', 15),
	(16, 274, 1, 'A', 15),
	(16, 275, 1, 'A', 15),
	(16, 276, 1, 'A', 15),
	(16, 57, 1, 'A', 15),
	(16, 277, 1, 'A', 15),
	(16, 98, 1, 'A', 15),
	(18, 93, 8, 'A', 17),
	(18, 99, 5, 'A', 17),
	(18, 282, 1, 'A', 17),
	(18, 283, 1, 'A', 17),
	(18, 74, 6, 'A', 17),
	(18, 25, 27, 'A', 17),
	(18, 279, 7, 'A', 17),
	(18, 281, 4, 'A', 17),
	(18, 13, 2, 'A', 17),
	(18, 44, 1, 'A', 17),
	(18, 176, 3, 'A', 17),
	(18, 72, 10, 'A', 17),
	(18, 24, 5, 'A', 17),
	(18, 284, 4, 'A', 17),
	(18, 280, 2, 'A', 17),
	(18, 256, 4, 'A', 17),
	(18, 84, 3, 'A', 17),
	(18, 89, 1, 'A', 17),
	(18, 285, 1, 'A', 17),
	(18, 254, 1, 'A', 17),
	(18, 286, 1, 'A', 17),
	(18, 51, 4, 'A', 17),
	(18, 52, 1, 'A', 17),
	(18, 131, 1, 'A', 17),
	(18, 287, 1, 'A', 17),
	(18, 195, 4, 'A', 17),
	(18, 10, 9, 'A', 17),
	(18, 288, 1, 'A', 17),
	(18, 140, 4, 'A', 17),
	(18, 30, 4, 'A', 17),
	(18, 289, 1, 'A', 17),
	(18, 290, 1, 'A', 17),
	(18, 38, 1, 'A', 17),
	(18, 56, 1, 'A', 17),
	(18, 55, 1, 'A', 17),
	(18, 291, 5, 'A', 17),
	(18, 263, 1, 'A', 17),
	(18, 15, 1, 'A', 17),
	(18, 16, 1, 'A', 17),
	(18, 292, 1, 'A', 17),
	(18, 293, 2, 'A', 17),
	(18, 259, 1, 'A', 17),
	(18, 294, 1, 'A', 17),
	(18, 120, 5, 'A', 17),
	(18, 295, 4, 'A', 17),
	(18, 296, 1, 'A', 17),
	(18, 297, 1, 'A', 17),
	(18, 298, 1, 'A', 17),
	(18, 299, 1, 'A', 17),
	(18, 2, 6, 'A', 17),
	(18, 153, 1, 'A', 17),
	(18, 300, 1, 'A', 17),
	(18, 216, 1, 'A', 17),
	(18, 301, 1, 'A', 17),
	(18, 302, 1, 'A', 17),
	(18, 303, 1, 'A', 17),
	(18, 304, 1, 'A', 17),
	(18, 116, 6, 'A', 17),
	(18, 305, 5, 'A', 17),
	(18, 306, 4, 'A', 17),
	(18, 307, 5, 'A', 17),
	(18, 112, 2, 'A', 17),
	(18, 113, 2, 'A', 17),
	(18, 114, 2, 'A', 17),
	(18, 29, 1, 'A', 17),
	(18, 85, 2, 'A', 17),
	(18, 308, 2, 'A', 17),
	(18, 309, 2, 'A', 17),
	(18, 310, 1, 'A', 17),
	(18, 311, 1, 'A', 17),
	(18, 14, 4, 'A', 17),
	(18, 312, 1, 'A', 17),
	(18, 313, 1, 'A', 17),
	(18, 150, 1, 'A', 17),
	(18, 314, 1, 'A', 17),
	(18, 315, 1, 'A', 17),
	(18, 316, 1, 'A', 17),
	(18, 69, 4, 'A', 17),
	(18, 317, 3, 'A', 17),
	(18, 127, 1, 'A', 17),
	(18, 166, 1, 'A', 17),
	(18, 318, 1, 'A', 17),
	(18, 319, 1, 'A', 17),
	(18, 42, 4, 'A', 17),
	(18, 320, 1, 'A', 17),
	(18, 100, 1, 'A', 17),
	(18, 229, 1, 'A', 17),
	(18, 321, 2, 'A', 17),
	(18, 146, 1, 'A', 17),
	(18, 133, 2, 'A', 17),
	(18, 322, 1, 'A', 17),
	(18, 79, 1, 'A', 17),
	(18, 4, 3, 'A', 17),
	(18, 323, 1, 'A', 17),
	(18, 324, 1, 'A', 17),
	(18, 118, 1, 'A', 17),
	(18, 325, 1, 'A', 17),
	(18, 105, 3, 'A', 17),
	(18, 326, 1, 'A', 17),
	(18, 3, 1, 'A', 17),
	(18, 243, 1, 'A', 17),
	(18, 35, 1, 'A', 17),
	(18, 327, 1, 'A', 17),
	(18, 328, 1, 'A', 17),
	(18, 329, 2, 'A', 17),
	(18, 330, 1, 'A', 17),
	(18, 210, 1, 'A', 17),
	(18, 36, 1, 'A', 17),
	(18, 331, 1, 'A', 17),
	(18, 222, 1, 'A', 17),
	(18, 332, 1, 'A', 17),
	(18, 333, 1, 'A', 17),
	(18, 334, 1, 'A', 17),
	(18, 335, 1, 'A', 17),
	(18, 66, 1, 'A', 17),
	(18, 336, 1, 'A', 17),
	(18, 8, 1, 'A', 17),
	(18, 337, 1, 'A', 17),
	(18, 338, 1, 'A', 17),
	(18, 339, 1, 'A', 17),
	(18, 340, 1, 'A', 17),
	(18, 341, 1, 'A', 17),
	(18, 342, 1, 'A', 17),
	(18, 21, 1, 'A', 17),
	(18, 209, 1, 'A', 17),
	(18, 111, 1, 'A', 17),
	(18, 343, 1, 'A', 17),
	(18, 344, 1, 'A', 17),
	(18, 345, 1, 'A', 17),
	(20, 346, 2, 'A', 19),
	(20, 348, 2, 'A', 19),
	(20, 99, 1, 'A', 19),
	(20, 220, 1, 'A', 19),
	(20, 13, 1, 'A', 19),
	(20, 37, 1, 'A', 19),
	(20, 349, 1, 'A', 19),
	(20, 350, 1, 'A', 19),
	(20, 19, 4, 'A', 19),
	(20, 351, 1, 'A', 19),
	(20, 352, 1, 'A', 19),
	(20, 353, 1, 'A', 19),
	(20, 354, 1, 'A', 19),
	(20, 74, 1, 'A', 19),
	(20, 355, 1, 'A', 19),
	(20, 356, 1, 'A', 19),
	(20, 347, 4, 'A', 19),
	(20, 2, 1, 'A', 19),
	(20, 263, 3, 'A', 19),
	(20, 42, 2, 'A', 19),
	(20, 339, 3, 'A', 19),
	(20, 340, 6, 'A', 19),
	(20, 357, 3, 'A', 19),
	(20, 358, 4, 'A', 19),
	(20, 309, 2, 'A', 19),
	(20, 214, 2, 'A', 19),
	(22, 247, 2, 'A', 21),
	(22, 361, 1, 'A', 21),
	(22, 2, 2, 'A', 21),
	(22, 25, 8, 'A', 21),
	(22, 362, 1, 'A', 21),
	(22, 74, 6, 'A', 21),
	(22, 139, 1, 'A', 21),
	(22, 38, 1, 'A', 21),
	(22, 363, 3, 'A', 21),
	(22, 10, 2, 'A', 21),
	(22, 105, 2, 'A', 21),
	(22, 364, 1, 'A', 21),
	(22, 321, 1, 'A', 21),
	(22, 171, 1, 'A', 21),
	(22, 195, 1, 'A', 21),
	(22, 4, 1, 'A', 21),
	(22, 65, 1, 'A', 21),
	(22, 365, 2, 'A', 21),
	(22, 270, 1, 'A', 21),
	(22, 366, 1, 'A', 21),
	(22, 367, 1, 'A', 21),
	(22, 30, 2, 'A', 21),
	(22, 231, 2, 'A', 21),
	(22, 368, 1, 'A', 21),
	(22, 56, 2, 'A', 21),
	(22, 369, 1, 'A', 21),
	(22, 153, 1, 'A', 21),
	(22, 234, 1, 'A', 21),
	(22, 88, 1, 'A', 21),
	(22, 27, 1, 'A', 21),
	(22, 370, 4, 'A', 21),
	(22, 60, 4, 'A', 21),
	(22, 371, 3, 'A', 21),
	(22, 372, 2, 'A', 21),
	(22, 63, 2, 'A', 21),
	(22, 373, 2, 'A', 21),
	(22, 107, 3, 'A', 21),
	(22, 374, 4, 'A', 21),
	(22, 375, 2, 'A', 21),
	(22, 376, 2, 'A', 21),
	(22, 377, 1, 'A', 21),
	(22, 99, 1, 'A', 21),
	(22, 325, 1, 'A', 21),
	(22, 312, 1, 'A', 21),
	(22, 84, 1, 'A', 21),
	(22, 222, 1, 'A', 21),
	(22, 378, 1, 'A', 21),
	(22, 18, 1, 'A', 21),
	(22, 379, 1, 'A', 21),
	(22, 380, 1, 'A', 21),
	(22, 271, 1, 'A', 21),
	(22, 381, 1, 'A', 21),
	(24, 383, 1, 'A', 23),
	(24, 14, 1, 'A', 23),
	(24, 2, 1, 'A', 23),
	(24, 384, 1, 'A', 23),
	(24, 24, 1, 'A', 23),
	(24, 385, 1, 'A', 23),
	(24, 25, 4, 'A', 23),
	(24, 106, 15, 'A', 23),
	(24, 120, 8, 'A', 23),
	(24, 93, 2, 'A', 23),
	(24, 35, 1, 'A', 23),
	(24, 101, 1, 'A', 23),
	(24, 8, 1, 'A', 23),
	(24, 386, 1, 'A', 23),
	(24, 382, 5, 'A', 23),
	(24, 97, 1, 'A', 23),
	(24, 387, 1, 'A', 23),
	(24, 388, 1, 'A', 23),
	(24, 389, 2, 'A', 23),
	(24, 143, 1, 'A', 23),
	(24, 4, 1, 'A', 23),
	(24, 390, 1, 'A', 23),
	(24, 391, 1, 'A', 23),
	(24, 13, 1, 'A', 23),
	(24, 85, 1, 'A', 23),
	(24, 40, 1, 'A', 23),
	(24, 392, 1, 'A', 23),
	(24, 195, 1, 'A', 23),
	(24, 393, 1, 'A', 23),
	(24, 74, 1, 'A', 23),
	(24, 107, 6, 'A', 23),
	(24, 115, 6, 'A', 23),
	(24, 108, 5, 'A', 23),
	(24, 116, 2, 'A', 23),
	(24, 117, 6, 'A', 23),
	(24, 303, 1, 'A', 23),
	(24, 394, 1, 'A', 23),
	(24, 29, 1, 'A', 23),
	(24, 395, 1, 'A', 23),
	(24, 105, 1, 'A', 23),
	(24, 112, 5, 'A', 23),
	(24, 113, 5, 'A', 23),
	(24, 114, 5, 'A', 23),
	(24, 60, 2, 'A', 23),
	(24, 125, 1, 'A', 23),
	(24, 110, 3, 'A', 23),
	(24, 58, 1, 'A', 23),
	(24, 315, 1, 'A', 23),
	(24, 63, 2, 'A', 23),
	(24, 61, 2, 'A', 23),
	(26, 10, 9, 'A', 25),
	(26, 3, 1, 'A', 25),
	(26, 120, 9, 'A', 25),
	(26, 361, 2, 'A', 25),
	(26, 2, 4, 'A', 25),
	(26, 400, 1, 'A', 25),
	(26, 384, 2, 'A', 25),
	(26, 88, 2, 'A', 25),
	(26, 401, 1, 'A', 25),
	(26, 153, 2, 'A', 25),
	(26, 97, 2, 'A', 25),
	(26, 25, 20, 'A', 25),
	(26, 321, 4, 'A', 25),
	(26, 105, 7, 'A', 25),
	(26, 364, 1, 'A', 25),
	(26, 74, 7, 'A', 25),
	(26, 171, 2, 'A', 25),
	(26, 402, 1, 'A', 25),
	(26, 95, 1, 'A', 25),
	(26, 403, 2, 'A', 25),
	(26, 378, 2, 'A', 25),
	(26, 367, 2, 'A', 25),
	(26, 21, 1, 'A', 25),
	(26, 271, 2, 'A', 25),
	(26, 365, 1, 'A', 25),
	(26, 14, 2, 'A', 25),
	(26, 404, 1, 'A', 25),
	(26, 405, 1, 'A', 25),
	(26, 224, 1, 'A', 25),
	(26, 4, 5, 'A', 25),
	(26, 30, 1, 'A', 25),
	(26, 406, 1, 'A', 25),
	(26, 79, 1, 'A', 25),
	(26, 407, 1, 'A', 25),
	(26, 40, 1, 'A', 25),
	(26, 65, 1, 'A', 25),
	(26, 408, 5, 'A', 25),
	(26, 15, 1, 'A', 25),
	(26, 16, 1, 'A', 25),
	(26, 409, 1, 'A', 25),
	(26, 410, 1, 'A', 25),
	(26, 304, 2, 'A', 25),
	(26, 85, 1, 'A', 25),
	(26, 411, 1, 'A', 25),
	(26, 215, 1, 'A', 25),
	(26, 195, 1, 'A', 25),
	(26, 412, 1, 'A', 25),
	(26, 413, 1, 'A', 25),
	(26, 414, 1, 'A', 25),
	(26, 107, 4, 'A', 25),
	(26, 60, 17, 'A', 25),
	(26, 415, 2, 'A', 25),
	(26, 416, 4, 'A', 25),
	(26, 417, 4, 'A', 25),
	(26, 418, 3, 'A', 25),
	(26, 419, 2, 'A', 25),
	(26, 420, 3, 'A', 25),
	(26, 295, 1, 'A', 25),
	(26, 44, 1, 'A', 25),
	(26, 84, 1, 'A', 25),
	(26, 421, 1, 'A', 25),
	(26, 422, 1, 'A', 25),
	(26, 423, 2, 'A', 25),
	(26, 121, 2, 'A', 25),
	(26, 424, 1, 'A', 25),
	(26, 156, 1, 'A', 25),
	(26, 425, 1, 'A', 25),
	(26, 426, 1, 'A', 25),
	(26, 397, 2, 'A', 25),
	(26, 167, 1, 'A', 25),
	(26, 34, 2, 'A', 25),
	(26, 336, 2, 'A', 25),
	(26, 427, 1, 'A', 25),
	(26, 428, 1, 'A', 25),
	(26, 99, 1, 'A', 25),
	(26, 243, 3, 'A', 25),
	(26, 137, 1, 'A', 25),
	(26, 157, 1, 'A', 25),
	(26, 429, 1, 'A', 25),
	(26, 430, 1, 'A', 25),
	(26, 431, 1, 'A', 25),
	(26, 432, 1, 'A', 25),
	(26, 282, 1, 'A', 25),
	(26, 433, 1, 'A', 25),
	(26, 42, 1, 'A', 25),
	(26, 434, 1, 'A', 25),
	(26, 263, 1, 'A', 25),
	(26, 302, 1, 'A', 25),
	(26, 435, 1, 'A', 25),
	(26, 436, 1, 'A', 25),
	(26, 229, 1, 'A', 25),
	(26, 72, 1, 'A', 25),
	(26, 437, 2, 'A', 25),
	(26, 438, 2, 'A', 25),
	(26, 439, 4, 'A', 25),
	(26, 440, 4, 'A', 25),
	(26, 441, 6, 'A', 25),
	(26, 239, 1, 'A', 25),
	(26, 442, 1, 'A', 25),
	(26, 443, 1, 'A', 25),
	(28, 444, 10, 'A', 27),
	(28, 218, 3, 'A', 27),
	(28, 89, 1, 'A', 27),
	(28, 4, 4, 'A', 27),
	(28, 2, 2, 'A', 27),
	(28, 123, 3, 'A', 27),
	(28, 8, 4, 'A', 27),
	(28, 10, 1, 'A', 27),
	(28, 3, 2, 'A', 27),
	(28, 25, 5, 'A', 27),
	(28, 261, 2, 'A', 27),
	(28, 446, 1, 'A', 27),
	(28, 36, 5, 'A', 27),
	(28, 331, 1, 'A', 27),
	(28, 447, 1, 'A', 27),
	(28, 14, 3, 'A', 27),
	(28, 143, 2, 'A', 27),
	(28, 448, 2, 'A', 27),
	(28, 76, 3, 'A', 27),
	(28, 133, 1, 'A', 27),
	(28, 19, 1, 'A', 27),
	(28, 16, 3, 'A', 27),
	(28, 24, 1, 'A', 27),
	(28, 13, 2, 'A', 27),
	(28, 31, 1, 'A', 27),
	(28, 35, 3, 'A', 27),
	(28, 40, 1, 'A', 27),
	(28, 88, 2, 'A', 27),
	(28, 247, 2, 'A', 27),
	(28, 74, 1, 'A', 27),
	(28, 105, 5, 'A', 27),
	(28, 120, 2, 'A', 27),
	(28, 210, 2, 'A', 27),
	(28, 449, 1, 'A', 27),
	(28, 450, 2, 'A', 27),
	(28, 451, 1, 'A', 27),
	(28, 137, 3, 'A', 27),
	(28, 452, 1, 'A', 27),
	(28, 127, 1, 'A', 27),
	(28, 252, 1, 'A', 27),
	(28, 453, 3, 'A', 27),
	(28, 363, 1, 'A', 27),
	(28, 99, 1, 'A', 27),
	(28, 64, 1, 'A', 27),
	(28, 454, 1, 'A', 27),
	(28, 163, 1, 'A', 27),
	(28, 177, 1, 'A', 27),
	(28, 455, 1, 'A', 27),
	(28, 456, 1, 'A', 27),
	(28, 266, 1, 'A', 27),
	(28, 267, 1, 'A', 27),
	(28, 457, 1, 'A', 27),
	(28, 458, 1, 'A', 27),
	(28, 459, 1, 'A', 27),
	(28, 312, 1, 'A', 27),
	(28, 258, 1, 'A', 27),
	(28, 104, 1, 'A', 27),
	(28, 84, 1, 'A', 27),
	(28, 460, 1, 'A', 27),
	(28, 81, 1, 'A', 27),
	(28, 42, 1, 'A', 27),
	(28, 185, 1, 'A', 27),
	(30, 444, 7, 'A', 29),
	(30, 133, 1, 'A', 29),
	(30, 19, 1, 'A', 29),
	(30, 464, 1, 'A', 29),
	(30, 2, 5, 'A', 29),
	(30, 90, 1, 'A', 29),
	(30, 42, 1, 'A', 29),
	(30, 137, 1, 'A', 29),
	(30, 96, 1, 'A', 29),
	(30, 21, 1, 'A', 29),
	(30, 97, 1, 'A', 29),
	(30, 25, 11, 'A', 29),
	(30, 445, 3, 'A', 29),
	(30, 465, 1, 'A', 29),
	(30, 10, 2, 'A', 29),
	(30, 466, 1, 'A', 29),
	(30, 429, 1, 'A', 29),
	(30, 74, 7, 'A', 29),
	(30, 4, 5, 'A', 29),
	(30, 105, 1, 'A', 29),
	(30, 30, 1, 'A', 29),
	(30, 397, 1, 'A', 29),
	(30, 120, 2, 'A', 29),
	(30, 250, 1, 'A', 29),
	(30, 88, 1, 'A', 29),
	(30, 87, 1, 'A', 29),
	(30, 218, 2, 'A', 29),
	(30, 261, 1, 'A', 29),
	(30, 467, 1, 'A', 29),
	(30, 80, 1, 'A', 29),
	(30, 468, 1, 'A', 29),
	(30, 469, 1, 'A', 29),
	(30, 304, 5, 'A', 29),
	(30, 60, 2, 'A', 29),
	(30, 470, 1, 'A', 29),
	(30, 276, 1, 'A', 29),
	(30, 267, 2, 'A', 29),
	(30, 425, 1, 'A', 29),
	(30, 471, 1, 'A', 29),
	(30, 85, 1, 'A', 29),
	(30, 265, 1, 'A', 29),
	(30, 157, 2, 'A', 29),
	(30, 461, 3, 'A', 29),
	(30, 14, 2, 'A', 29),
	(30, 245, 2, 'A', 29),
	(30, 243, 1, 'A', 29),
	(30, 79, 1, 'A', 29),
	(30, 472, 1, 'A', 29),
	(30, 95, 1, 'A', 29),
	(30, 473, 1, 'A', 29),
	(30, 474, 1, 'A', 29),
	(30, 224, 1, 'A', 29),
	(30, 475, 1, 'A', 29),
	(30, 476, 1, 'A', 29),
	(30, 477, 1, 'A', 29),
	(30, 478, 1, 'A', 29),
	(30, 479, 1, 'A', 29),
	(30, 480, 1, 'A', 29),
	(30, 481, 1, 'A', 29),
	(30, 482, 1, 'A', 29),
	(30, 483, 3, 'A', 29),
	(30, 112, 3, 'A', 29),
	(30, 113, 2, 'A', 29),
	(30, 114, 2, 'A', 29),
	(30, 484, 1, 'A', 29),
	(30, 485, 1, 'A', 29),
	(30, 462, 4, 'A', 29),
	(30, 486, 1, 'A', 29),
	(30, 24, 1, 'A', 29),
	(30, 204, 2, 'A', 29),
	(30, 205, 1, 'A', 29),
	(30, 51, 1, 'A', 29),
	(30, 487, 3, 'A', 29),
	(30, 291, 1, 'A', 29),
	(30, 13, 1, 'A', 29),
	(30, 488, 1, 'A', 29),
	(30, 489, 1, 'A', 29),
	(30, 490, 1, 'A', 29),
	(30, 491, 1, 'A', 29),
	(30, 107, 2, 'A', 29),
	(30, 115, 1, 'A', 29),
	(30, 108, 2, 'A', 29),
	(30, 106, 1, 'A', 29),
	(30, 116, 3, 'A', 29),
	(30, 117, 1, 'A', 29),
	(30, 118, 1, 'A', 29),
	(30, 306, 1, 'A', 29),
	(30, 273, 1, 'A', 29),
	(30, 492, 1, 'A', 29),
	(30, 493, 1, 'A', 29),
	(32, 383, 1, 'A', 31),
	(32, 14, 1, 'A', 31),
	(32, 2, 1, 'A', 31),
	(32, 384, 1, 'A', 31),
	(32, 13, 1, 'A', 31),
	(32, 25, 3, 'A', 31),
	(32, 461, 1, 'A', 31),
	(32, 245, 1, 'A', 31),
	(32, 85, 1, 'A', 31),
	(32, 16, 1, 'A', 31),
	(32, 36, 1, 'A', 31),
	(32, 476, 1, 'A', 31),
	(32, 495, 1, 'A', 31),
	(32, 99, 2, 'A', 31),
	(32, 496, 1, 'A', 31),
	(32, 93, 1, 'A', 31),
	(32, 87, 1, 'A', 31),
	(32, 112, 1, 'A', 31),
	(32, 497, 1, 'A', 31),
	(32, 10, 1, 'A', 31),
	(32, 498, 1, 'A', 31),
	(32, 471, 1, 'A', 31),
	(32, 133, 1, 'A', 31),
	(32, 257, 1, 'A', 31),
	(32, 499, 1, 'A', 31),
	(32, 191, 1, 'A', 31),
	(32, 145, 1, 'A', 31),
	(32, 68, 1, 'A', 31),
	(32, 500, 1, 'A', 31),
	(32, 69, 1, 'A', 31),
	(32, 138, 1, 'A', 31),
	(32, 267, 1, 'A', 31),
	(32, 98, 1, 'A', 31),
	(33, 107, 2, 'Q', 33),
	(33, 105, 1, 'Q', 33),
	(33, 306, 1, 'Q', 33),
	(33, 115, 1, 'Q', 33),
	(33, 108, 1, 'Q', 33),
	(33, 106, 1, 'Q', 33),
	(33, 116, 1, 'Q', 33),
	(33, 117, 1, 'Q', 33),
	(33, 444, 1, 'Q', 33),
	(33, 60, 2, 'Q', 33),
	(33, 111, 5, 'Q', 33),
	(33, 505, 2, 'Q', 33),
	(33, 506, 3, 'Q', 33),
	(33, 507, 1, 'Q', 33),
	(33, 112, 1, 'Q', 33),
	(33, 113, 1, 'Q', 33),
	(33, 114, 1, 'Q', 33),
	(34, 25, 2, 'A', 33),
	(34, 498, 1, 'A', 33),
	(34, 29, 1, 'A', 33),
	(34, 85, 1, 'A', 33),
	(34, 508, 1, 'A', 33),
	(34, 4, 1, 'A', 33),
	(34, 509, 1, 'A', 33),
	(34, 440, 1, 'A', 33),
	(34, 267, 2, 'A', 33),
	(34, 229, 1, 'A', 33),
	(34, 510, 2, 'A', 33),
	(34, 511, 1, 'A', 33),
	(34, 457, 1, 'A', 33),
	(34, 218, 3, 'A', 33),
	(34, 111, 2, 'A', 33),
	(34, 268, 1, 'A', 33),
	(34, 282, 2, 'A', 33),
	(34, 44, 1, 'A', 33),
	(34, 448, 1, 'A', 33),
	(34, 269, 2, 'A', 33),
	(34, 14, 1, 'A', 33),
	(34, 2, 2, 'A', 33),
	(34, 127, 1, 'A', 33),
	(34, 444, 2, 'A', 33),
	(34, 30, 2, 'A', 33),
	(34, 96, 1, 'A', 33),
	(34, 99, 1, 'A', 33),
	(34, 459, 1, 'A', 33),
	(34, 24, 1, 'A', 33),
	(34, 36, 1, 'A', 33),
	(34, 40, 1, 'A', 33),
	(34, 447, 1, 'A', 33),
	(34, 13, 1, 'A', 33),
	(34, 75, 1, 'A', 33),
	(34, 234, 1, 'A', 33),
	(34, 18, 1, 'A', 33),
	(34, 258, 1, 'A', 33),
	(34, 481, 1, 'A', 33),
	(36, 25, 13, 'A', 35),
	(36, 512, 6, 'A', 35),
	(36, 445, 3, 'A', 35),
	(36, 2, 2, 'A', 35),
	(36, 176, 3, 'A', 35),
	(36, 24, 4, 'A', 35),
	(36, 138, 1, 'A', 35),
	(36, 513, 1, 'A', 35),
	(36, 514, 1, 'A', 35),
	(36, 30, 3, 'A', 35),
	(36, 449, 2, 'A', 35),
	(36, 97, 2, 'A', 35),
	(36, 21, 1, 'A', 35),
	(36, 515, 1, 'A', 35),
	(36, 74, 8, 'A', 35),
	(36, 516, 16, 'A', 35),
	(36, 105, 16, 'A', 35),
	(36, 410, 2, 'A', 35),
	(36, 99, 2, 'A', 35),
	(36, 495, 2, 'A', 35),
	(36, 89, 4, 'A', 35),
	(36, 72, 1, 'A', 35),
	(36, 35, 1, 'A', 35),
	(36, 36, 1, 'A', 35),
	(36, 517, 2, 'A', 35),
	(36, 55, 1, 'A', 35),
	(36, 518, 1, 'A', 35),
	(36, 519, 1, 'A', 35),
	(36, 520, 1, 'A', 35),
	(36, 450, 1, 'A', 35),
	(36, 521, 7, 'A', 35),
	(36, 522, 1, 'A', 35),
	(36, 321, 1, 'A', 35),
	(36, 392, 4, 'A', 35),
	(36, 255, 4, 'A', 35),
	(36, 523, 1, 'A', 35),
	(36, 247, 6, 'A', 35),
	(36, 224, 2, 'A', 35),
	(36, 137, 1, 'A', 35),
	(36, 44, 1, 'A', 35),
	(36, 249, 1, 'A', 35),
	(36, 304, 1, 'A', 35),
	(36, 524, 1, 'A', 35),
	(36, 95, 1, 'A', 35),
	(36, 525, 1, 'A', 35),
	(36, 4, 1, 'A', 35),
	(36, 107, 4, 'A', 35),
	(36, 526, 1, 'A', 35),
	(36, 60, 2, 'A', 35),
	(36, 527, 5, 'A', 35),
	(36, 528, 1, 'A', 35),
	(36, 112, 7, 'A', 35),
	(36, 113, 7, 'A', 35),
	(36, 114, 7, 'A', 35),
	(36, 116, 1, 'A', 35),
	(36, 529, 1, 'A', 35),
	(36, 530, 2, 'A', 35),
	(36, 108, 3, 'A', 35),
	(36, 531, 7, 'A', 35),
	(36, 442, 1, 'A', 35),
	(36, 532, 1, 'A', 35),
	(36, 443, 1, 'A', 35),
	(36, 533, 1, 'A', 35),
	(36, 534, 1, 'A', 35),
	(36, 261, 1, 'A', 35),
	(36, 535, 1, 'A', 35),
	(36, 536, 1, 'A', 35),
	(36, 120, 2, 'A', 35),
	(36, 537, 1, 'A', 35),
	(38, 383, 1, 'A', 37),
	(38, 257, 1, 'A', 37),
	(38, 35, 1, 'A', 37),
	(38, 36, 1, 'A', 37),
	(38, 336, 1, 'A', 37),
	(38, 21, 1, 'A', 37),
	(38, 538, 1, 'A', 37),
	(38, 115, 1, 'A', 37),
	(38, 97, 1, 'A', 37),
	(38, 10, 1, 'A', 37),
	(38, 4, 1, 'A', 37),
	(38, 105, 1, 'A', 37),
	(38, 195, 1, 'A', 37),
	(38, 25, 1, 'A', 37),
	(38, 321, 1, 'A', 37),
	(38, 171, 1, 'A', 37),
	(38, 84, 1, 'A', 37),
	(38, 539, 1, 'A', 37),
	(38, 540, 1, 'A', 37),
	(38, 365, 1, 'A', 37),
	(40, 258, 1, 'A', 39),
	(40, 541, 1, 'A', 39),
	(40, 74, 1, 'A', 39),
	(40, 115, 2, 'A', 39),
	(40, 97, 3, 'A', 39),
	(40, 427, 1, 'A', 39),
	(40, 25, 5, 'A', 39),
	(40, 321, 1, 'A', 39),
	(40, 428, 1, 'A', 39),
	(40, 35, 2, 'A', 39),
	(40, 36, 2, 'A', 39),
	(40, 234, 1, 'A', 39),
	(40, 10, 2, 'A', 39),
	(40, 542, 1, 'A', 39),
	(40, 84, 2, 'A', 39),
	(40, 37, 1, 'A', 39),
	(40, 440, 2, 'A', 39),
	(40, 543, 2, 'A', 39),
	(40, 16, 1, 'A', 39),
	(40, 544, 1, 'A', 39),
	(40, 405, 1, 'A', 39),
	(40, 11, 1, 'A', 39),
	(40, 495, 1, 'A', 39),
	(40, 397, 1, 'A', 39),
	(40, 21, 1, 'A', 39),
	(40, 545, 1, 'A', 39),
	(40, 546, 1, 'A', 39),
	(40, 92, 1, 'A', 39),
	(40, 45, 1, 'A', 39),
	(40, 99, 1, 'A', 39),
	(40, 547, 1, 'A', 39),
	(40, 30, 1, 'A', 39),
	(40, 548, 1, 'A', 39),
	(40, 489, 1, 'A', 39),
	(40, 229, 1, 'A', 39),
	(40, 509, 1, 'A', 39),
	(40, 549, 1, 'A', 39),
	(40, 64, 1, 'A', 39),
	(40, 149, 1, 'A', 39),
	(40, 446, 1, 'A', 39),
	(40, 449, 1, 'A', 39),
	(42, 115, 9, 'A', 41),
	(42, 97, 2, 'A', 41),
	(42, 30, 5, 'A', 41),
	(42, 96, 3, 'A', 41),
	(42, 99, 1, 'A', 41),
	(42, 220, 1, 'A', 41),
	(42, 13, 5, 'A', 41),
	(42, 152, 1, 'A', 41),
	(42, 24, 3, 'A', 41),
	(42, 25, 14, 'A', 41),
	(42, 105, 9, 'A', 41),
	(42, 74, 4, 'A', 41),
	(42, 3, 3, 'A', 41),
	(42, 79, 3, 'A', 41),
	(42, 16, 1, 'A', 41),
	(42, 51, 1, 'A', 41),
	(42, 72, 1, 'A', 41),
	(42, 550, 1, 'A', 41),
	(42, 69, 1, 'A', 41),
	(42, 472, 1, 'A', 41),
	(42, 2, 5, 'A', 41),
	(42, 547, 1, 'A', 41),
	(42, 149, 1, 'A', 41),
	(42, 35, 1, 'A', 41),
	(42, 151, 2, 'A', 41),
	(42, 36, 2, 'A', 41),
	(42, 487, 1, 'A', 41),
	(42, 195, 2, 'A', 41),
	(42, 196, 1, 'A', 41),
	(42, 520, 1, 'A', 41),
	(42, 42, 2, 'A', 41),
	(42, 304, 1, 'A', 41),
	(42, 93, 5, 'A', 41),
	(42, 44, 2, 'A', 41),
	(42, 176, 2, 'A', 41),
	(42, 551, 1, 'A', 41),
	(42, 403, 1, 'A', 41),
	(42, 10, 2, 'A', 41),
	(42, 145, 4, 'A', 41),
	(42, 552, 2, 'A', 41),
	(42, 553, 2, 'A', 41),
	(42, 554, 1, 'A', 41),
	(42, 555, 1, 'A', 41),
	(42, 98, 2, 'A', 41),
	(42, 133, 3, 'A', 41),
	(42, 556, 1, 'A', 41),
	(42, 31, 2, 'A', 41),
	(42, 85, 1, 'A', 41),
	(42, 557, 1, 'A', 41),
	(42, 392, 1, 'A', 41),
	(42, 14, 4, 'A', 41),
	(42, 171, 1, 'A', 41),
	(42, 558, 2, 'A', 41),
	(42, 291, 2, 'A', 41),
	(42, 4, 2, 'A', 41),
	(42, 120, 2, 'A', 41),
	(42, 559, 1, 'A', 41),
	(42, 560, 2, 'A', 41),
	(42, 110, 1, 'A', 41),
	(42, 475, 1, 'A', 41),
	(42, 137, 1, 'A', 41),
	(42, 210, 1, 'A', 41),
	(42, 561, 1, 'A', 41),
	(42, 562, 2, 'A', 41),
	(42, 157, 1, 'A', 41),
	(42, 563, 1, 'A', 41),
	(42, 564, 1, 'A', 41),
	(42, 81, 1, 'A', 41),
	(42, 518, 1, 'A', 41),
	(44, 25, 6, 'A', 43),
	(44, 106, 1, 'A', 43),
	(44, 565, 1, 'A', 43),
	(44, 74, 1, 'A', 43),
	(44, 72, 2, 'A', 43),
	(44, 362, 1, 'A', 43),
	(44, 2, 2, 'A', 43),
	(44, 24, 1, 'A', 43),
	(44, 566, 1, 'A', 43),
	(44, 489, 1, 'A', 43),
	(44, 69, 3, 'A', 43),
	(44, 128, 1, 'A', 43),
	(44, 567, 1, 'A', 43),
	(44, 88, 2, 'A', 43),
	(44, 568, 1, 'A', 43),
	(44, 30, 1, 'A', 43),
	(44, 569, 2, 'A', 43),
	(44, 140, 2, 'A', 43),
	(44, 92, 1, 'A', 43),
	(44, 3, 1, 'A', 43),
	(44, 79, 2, 'A', 43),
	(44, 485, 2, 'A', 43),
	(44, 570, 1, 'A', 43),
	(44, 220, 1, 'A', 43),
	(44, 571, 1, 'A', 43),
	(44, 13, 2, 'A', 43),
	(44, 572, 1, 'A', 43),
	(44, 176, 1, 'A', 43),
	(44, 573, 1, 'A', 43),
	(44, 84, 1, 'A', 43),
	(44, 14, 1, 'A', 43),
	(44, 574, 1, 'A', 43),
	(44, 258, 1, 'A', 43),
	(44, 575, 1, 'A', 43),
	(44, 257, 1, 'A', 43),
	(44, 576, 1, 'A', 43),
	(44, 36, 1, 'A', 43),
	(44, 577, 1, 'A', 43),
	(44, 42, 1, 'A', 43),
	(46, 3, 2, 'A', 45),
	(46, 578, 3, 'A', 45),
	(46, 2, 3, 'A', 45),
	(46, 25, 8, 'A', 45),
	(46, 79, 1, 'A', 45),
	(46, 13, 1, 'A', 45),
	(46, 579, 1, 'A', 45),
	(46, 24, 4, 'A', 45),
	(46, 47, 1, 'A', 45),
	(46, 45, 1, 'A', 45),
	(46, 46, 1, 'A', 45),
	(46, 580, 1, 'A', 45),
	(46, 74, 1, 'A', 45),
	(46, 581, 1, 'A', 45),
	(46, 90, 2, 'A', 45),
	(46, 137, 1, 'A', 45),
	(46, 30, 2, 'A', 45),
	(46, 582, 1, 'A', 45),
	(46, 389, 1, 'A', 45),
	(46, 89, 1, 'A', 45),
	(46, 304, 1, 'A', 45),
	(46, 475, 1, 'A', 45),
	(46, 540, 1, 'A', 45),
	(46, 104, 1, 'A', 45),
	(46, 583, 1, 'A', 45),
	(46, 93, 1, 'A', 45),
	(46, 584, 1, 'A', 45),
	(46, 585, 2, 'A', 45),
	(46, 105, 2, 'A', 45),
	(46, 547, 1, 'A', 45),
	(46, 88, 1, 'A', 45),
	(48, 492, 1, 'A', 47),
	(48, 85, 1, 'A', 47),
	(48, 488, 1, 'A', 47),
	(48, 67, 1, 'A', 47),
	(48, 69, 1, 'A', 47),
	(50, 24, 10, 'A', 49),
	(50, 232, 16, 'A', 49),
	(50, 25, 40, 'A', 49),
	(50, 140, 1, 'A', 49),
	(50, 55, 1, 'A', 49),
	(50, 93, 10, 'A', 49),
	(50, 44, 1, 'A', 49),
	(50, 590, 1, 'A', 49),
	(50, 97, 1, 'A', 49),
	(50, 145, 1, 'A', 49),
	(50, 589, 7, 'A', 49),
	(50, 30, 6, 'A', 49),
	(50, 588, 7, 'A', 49),
	(50, 304, 4, 'A', 49),
	(50, 105, 6, 'A', 49),
	(50, 424, 17, 'A', 49),
	(50, 60, 6, 'A', 49),
	(50, 560, 21, 'A', 49),
	(50, 481, 6, 'A', 49),
	(50, 591, 21, 'A', 49),
	(50, 525, 6, 'A', 49),
	(50, 51, 14, 'A', 49),
	(50, 42, 5, 'A', 49),
	(50, 72, 7, 'A', 49),
	(50, 592, 14, 'A', 49),
	(50, 118, 10, 'A', 49),
	(50, 40, 2, 'A', 49),
	(50, 593, 1, 'A', 49),
	(50, 4, 5, 'A', 49),
	(50, 272, 4, 'A', 49),
	(50, 594, 1, 'A', 49),
	(50, 321, 2, 'A', 49),
	(50, 35, 2, 'A', 49),
	(50, 214, 3, 'A', 49),
	(50, 88, 2, 'A', 49),
	(50, 595, 15, 'A', 49),
	(50, 146, 4, 'A', 49),
	(50, 596, 1, 'A', 49),
	(50, 213, 1, 'A', 49),
	(50, 85, 14, 'A', 49),
	(50, 597, 1, 'A', 49),
	(50, 2, 6, 'A', 49),
	(50, 102, 1, 'A', 49),
	(50, 195, 2, 'A', 49),
	(50, 171, 1, 'A', 49),
	(50, 13, 4, 'A', 49),
	(50, 598, 1, 'A', 49),
	(50, 69, 1, 'A', 49),
	(50, 317, 1, 'A', 49),
	(50, 10, 5, 'A', 49),
	(50, 101, 1, 'A', 49),
	(50, 599, 1, 'A', 49),
	(50, 261, 9, 'A', 49),
	(50, 600, 3, 'A', 49),
	(50, 133, 4, 'A', 49),
	(50, 601, 3, 'A', 49),
	(50, 256, 7, 'A', 49),
	(50, 31, 3, 'A', 49),
	(50, 222, 1, 'A', 49),
	(50, 602, 2, 'A', 49),
	(50, 81, 1, 'A', 49),
	(50, 8, 1, 'A', 49),
	(50, 122, 1, 'A', 49),
	(50, 302, 1, 'A', 49),
	(50, 603, 3, 'A', 49),
	(50, 196, 1, 'A', 49),
	(50, 74, 14, 'A', 49),
	(50, 157, 1, 'A', 49),
	(50, 107, 4, 'A', 49),
	(50, 106, 4, 'A', 49),
	(50, 115, 2, 'A', 49),
	(50, 108, 2, 'A', 49),
	(50, 116, 2, 'A', 49),
	(50, 117, 2, 'A', 49),
	(50, 112, 8, 'A', 49),
	(50, 113, 8, 'A', 49),
	(50, 114, 8, 'A', 49),
	(50, 262, 4, 'A', 49),
	(50, 604, 10, 'A', 49),
	(50, 528, 9, 'A', 49),
	(50, 605, 27, 'A', 49),
	(50, 36, 11, 'A', 49),
	(50, 606, 3, 'A', 49),
	(50, 119, 3, 'A', 49),
	(50, 505, 3, 'A', 49),
	(50, 607, 2, 'A', 49),
	(50, 468, 4, 'A', 49),
	(50, 502, 2, 'A', 49),
	(50, 498, 3, 'A', 49),
	(50, 29, 4, 'A', 49),
	(50, 124, 1, 'A', 49),
	(50, 475, 1, 'A', 49),
	(50, 608, 1, 'A', 49),
	(50, 14, 3, 'A', 49),
	(50, 127, 1, 'A', 49),
	(50, 257, 2, 'A', 49),
	(50, 258, 1, 'A', 49),
	(50, 609, 1, 'A', 49),
	(50, 18, 1, 'A', 49),
	(50, 271, 1, 'A', 49),
	(50, 303, 1, 'A', 49),
	(50, 353, 1, 'A', 49),
	(50, 395, 1, 'A', 49),
	(50, 610, 1, 'A', 49),
	(50, 611, 1, 'A', 49),
	(50, 16, 1, 'A', 49),
	(50, 143, 1, 'A', 49),
	(50, 450, 1, 'A', 49),
	(50, 612, 1, 'A', 49),
	(50, 259, 2, 'A', 49),
	(50, 94, 2, 'A', 49),
	(50, 367, 1, 'A', 49),
	(50, 473, 1, 'A', 49),
	(50, 291, 1, 'A', 49),
	(50, 613, 1, 'A', 49),
	(50, 3, 1, 'A', 49),
	(50, 120, 1, 'A', 49),
	(50, 487, 1, 'A', 49),
	(50, 614, 3, 'A', 49),
	(50, 165, 1, 'A', 49),
	(50, 408, 1, 'A', 49),
	(50, 510, 1, 'A', 49);

-- Dumping structure for table fullsm3q_askme.cookies
CREATE TABLE IF NOT EXISTS `cookies` (
  `cookieid` bigint(20) unsigned NOT NULL,
  `created` datetime NOT NULL,
  `createip` varbinary(16) NOT NULL,
  `written` datetime DEFAULT NULL,
  `writeip` varbinary(16) DEFAULT NULL,
  PRIMARY KEY (`cookieid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table fullsm3q_askme.cookies: ~0 rows (approximately)
DELETE FROM `cookies`;

-- Dumping structure for table fullsm3q_askme.iplimits
CREATE TABLE IF NOT EXISTS `iplimits` (
  `ip` varbinary(16) NOT NULL,
  `action` char(1) CHARACTER SET ascii NOT NULL,
  `period` int(10) unsigned NOT NULL,
  `count` smallint(5) unsigned NOT NULL,
  UNIQUE KEY `ip` (`ip`,`action`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table fullsm3q_askme.iplimits: ~2 rows (approximately)
DELETE FROM `iplimits`;
INSERT INTO `iplimits` (`ip`, `action`, `period`, `count`) VALUES
	(_binary 0x3125c9fa, 'A', 463429, 5),
	(_binary 0x3125c9fa, 'L', 463424, 2),
	(_binary 0x3125c9fa, 'Q', 463429, 5),
	(_binary 0x3125ca72, 'A', 463405, 1),
	(_binary 0x3125ca72, 'Q', 463405, 1);

-- Dumping structure for table fullsm3q_askme.messages
CREATE TABLE IF NOT EXISTS `messages` (
  `messageid` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `type` enum('PUBLIC','PRIVATE') NOT NULL DEFAULT 'PRIVATE',
  `fromuserid` int(10) unsigned DEFAULT NULL,
  `touserid` int(10) unsigned DEFAULT NULL,
  `fromhidden` tinyint(1) unsigned NOT NULL DEFAULT '0',
  `tohidden` tinyint(1) unsigned NOT NULL DEFAULT '0',
  `content` varchar(12000) NOT NULL,
  `format` varchar(20) CHARACTER SET ascii NOT NULL,
  `created` datetime NOT NULL,
  PRIMARY KEY (`messageid`),
  KEY `type` (`type`,`fromuserid`,`touserid`,`created`),
  KEY `touserid` (`touserid`,`type`,`created`),
  KEY `fromhidden` (`fromhidden`),
  KEY `tohidden` (`tohidden`),
  KEY `messages_ibfk_1` (`fromuserid`),
  CONSTRAINT `messages_ibfk_1` FOREIGN KEY (`fromuserid`) REFERENCES `users` (`userid`) ON DELETE SET NULL,
  CONSTRAINT `messages_ibfk_2` FOREIGN KEY (`touserid`) REFERENCES `users` (`userid`) ON DELETE SET NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table fullsm3q_askme.messages: ~0 rows (approximately)
DELETE FROM `messages`;

-- Dumping structure for table fullsm3q_askme.options
CREATE TABLE IF NOT EXISTS `options` (
  `title` varchar(40) NOT NULL,
  `content` varchar(12000) NOT NULL,
  PRIMARY KEY (`title`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table fullsm3q_askme.options: ~297 rows (approximately)
DELETE FROM `options`;
INSERT INTO `options` (`title`, `content`) VALUES
	('allow_anonymous_naming', '1'),
	('allow_change_usernames', '1'),
	('allow_close_own_questions', '1'),
	('allow_close_questions', '1'),
	('allow_login_email_only', ''),
	('allow_multi_answers', '1'),
	('allow_private_messages', '1'),
	('allow_self_answer', '1'),
	('allow_user_walls', '1'),
	('allow_view_q_bots', '1'),
	('avatar_allow_gravatar', '1'),
	('avatar_allow_upload', '1'),
	('avatar_default_blobid', ''),
	('avatar_default_height', ''),
	('avatar_default_show', ''),
	('avatar_default_width', ''),
	('avatar_message_list_size', '20'),
	('avatar_profile_size', '200'),
	('avatar_q_list_size', '0'),
	('avatar_q_page_a_size', '40'),
	('avatar_q_page_c_size', '20'),
	('avatar_q_page_q_size', '50'),
	('avatar_store_size', '400'),
	('avatar_users_size', '30'),
	('block_bad_usernames', 'anonymous'),
	('block_bad_words', ''),
	('block_ips_write', ''),
	('cache_acount', '25'),
	('cache_ccount', ''),
	('cache_flaggedcount', ''),
	('cache_qcount', '25'),
	('cache_queuedcount', ''),
	('cache_tagcount', '2'),
	('cache_uapprovecount', '0'),
	('cache_unaqcount', '0'),
	('cache_unselqcount', '24'),
	('cache_unupaqcount', '25'),
	('cache_userpointscount', '1'),
	('caching_catwidget_time', '30'),
	('caching_driver', 'filesystem'),
	('caching_enabled', '0'),
	('caching_q_start', '7'),
	('caching_q_time', '30'),
	('captcha_module', ''),
	('captcha_on_anon_post', '1'),
	('captcha_on_feedback', '1'),
	('columns_tags', '3'),
	('columns_users', '2'),
	('comment_on_as', '1'),
	('comment_on_qs', '1'),
	('confirm_user_emails', '1'),
	('confirm_user_required', ''),
	('custom_answer', ''),
	('custom_ask', ''),
	('custom_comment', ''),
	('custom_footer', ''),
	('custom_header', ''),
	('custom_home_content', ''),
	('custom_home_heading', ''),
	('custom_in_head', ''),
	('custom_register', ''),
	('custom_sidepanel', ''),
	('custom_welcome', ''),
	('db_version', '67'),
	('do_ask_check_qs', '0'),
	('do_close_on_select', '0'),
	('do_complete_tags', '1'),
	('do_count_q_views', '1'),
	('do_example_tags', '1'),
	('editor_for_as', 'WYSIWYG Editor'),
	('editor_for_cs', ''),
	('editor_for_qs', 'WYSIWYG Editor'),
	('enabled_plugins', ''),
	('event_logger_to_database', ''),
	('event_logger_to_files', ''),
	('extra_field_active', '0'),
	('extra_field_display', '0'),
	('extra_field_label', ''),
	('extra_field_prompt', ''),
	('feedback_email', 'admin@admin.com'),
	('feedback_enabled', '1'),
	('feed_for_activity', '1'),
	('feed_for_hot', ''),
	('feed_for_qa', '1'),
	('feed_for_questions', '1'),
	('feed_for_search', ''),
	('feed_for_tag_qs', ''),
	('feed_for_unanswered', '1'),
	('feed_full_text', '1'),
	('feed_number_items', '50'),
	('feed_per_category', '1'),
	('flagging_hide_after', '5'),
	('flagging_notify_every', '2'),
	('flagging_notify_first', '1'),
	('flagging_of_posts', '1'),
	('follow_on_as', '1'),
	('form_security_salt', 'flcgv1a3jishmjw1z20eh8di7swdcv7m'),
	('from_email', 'no-reply@activiacademy.com'),
	('home_description', ''),
	('hot_weight_answers', '100'),
	('hot_weight_a_age', '100'),
	('hot_weight_q_age', '100'),
	('hot_weight_views', '100'),
	('hot_weight_votes', '100'),
	('links_in_new_window', ''),
	('logo_height', ''),
	('logo_show', ''),
	('logo_url', ''),
	('logo_width', ''),
	('mailing_body', '\n\n\n--\nActiviacademy Q&A\nhttps://www.activiacademy.com/askme/'),
	('mailing_enabled', ''),
	('mailing_from_email', 'no-reply@activiacademy.com'),
	('mailing_from_name', 'Activiacademy Q&A'),
	('mailing_last_userid', ''),
	('mailing_per_minute', '500'),
	('mailing_subject', 'A message from Activiacademy Q&A'),
	('match_ask_check_qs', '3'),
	('match_example_tags', '3'),
	('max_len_q_title', '120'),
	('max_num_q_tags', '5'),
	('max_rate_ip_as', '50'),
	('max_rate_ip_cs', '40'),
	('max_rate_ip_flags', '10'),
	('max_rate_ip_logins', '20'),
	('max_rate_ip_messages', '10'),
	('max_rate_ip_qs', '20'),
	('max_rate_ip_registers', '5'),
	('max_rate_ip_uploads', '20'),
	('max_rate_ip_votes', '600'),
	('max_rate_user_as', '25'),
	('max_rate_user_cs', '20'),
	('max_rate_user_flags', '5'),
	('max_rate_user_messages', '5'),
	('max_rate_user_qs', '10'),
	('max_rate_user_uploads', '10'),
	('max_rate_user_votes', '300'),
	('max_store_user_updates', '50'),
	('minify_html', '1'),
	('min_len_a_content', '12'),
	('min_len_c_content', '12'),
	('min_len_q_content', '0'),
	('min_len_q_title', '12'),
	('min_num_q_tags', '0'),
	('moderate_anon_post', ''),
	('moderate_by_points', ''),
	('moderate_edited_again', ''),
	('moderate_notify_admin', '1'),
	('moderate_points_limit', '150'),
	('moderate_unapproved', ''),
	('moderate_unconfirmed', ''),
	('moderate_update_time', '1'),
	('moderate_users', ''),
	('nav_activity', '0'),
	('nav_ask', '1'),
	('nav_categories', '0'),
	('nav_home', ''),
	('nav_hot', '0'),
	('nav_qa_is_home', '0'),
	('nav_questions', '1'),
	('nav_tags', '1'),
	('nav_unanswered', '1'),
	('nav_users', '0'),
	('neat_urls', '5'),
	('notice_visitor', ''),
	('notice_welcome', ''),
	('notify_admin_q_post', ''),
	('notify_users_default', '0'),
	('pages_prev_next', '3'),
	('page_size_activity', '20'),
	('page_size_ask_check_qs', '5'),
	('page_size_ask_tags', '5'),
	('page_size_home', '20'),
	('page_size_hot_qs', '20'),
	('page_size_pms', '10'),
	('page_size_qs', '20'),
	('page_size_q_as', '10'),
	('page_size_search', '10'),
	('page_size_tags', '30'),
	('page_size_tag_qs', '20'),
	('page_size_una_qs', '20'),
	('page_size_users', '30'),
	('page_size_wall', '10'),
	('permit_anon_view_ips', '70'),
	('permit_anon_view_ips_points', ''),
	('permit_close_q', '70'),
	('permit_close_q_points', ''),
	('permit_delete_hidden', '40'),
	('permit_delete_hidden_points', ''),
	('permit_edit_a', '100'),
	('permit_edit_a_points', ''),
	('permit_edit_c', '70'),
	('permit_edit_c_points', ''),
	('permit_edit_q', '70'),
	('permit_edit_q_points', ''),
	('permit_edit_silent', '40'),
	('permit_edit_silent_points', ''),
	('permit_flag', '110'),
	('permit_flag_points', ''),
	('permit_hide_show', '70'),
	('permit_hide_show_points', ''),
	('permit_moderate', '100'),
	('permit_moderate_points', ''),
	('permit_post_a', '150'),
	('permit_post_a_points', ''),
	('permit_post_c', '150'),
	('permit_post_c_points', ''),
	('permit_post_q', '150'),
	('permit_post_q_points', ''),
	('permit_post_wall', '110'),
	('permit_post_wall_points', ''),
	('permit_retag_cat', '70'),
	('permit_retag_cat_points', ''),
	('permit_select_a', '100'),
	('permit_select_a_points', ''),
	('permit_view_new_users_page', '70'),
	('permit_view_new_users_page_points', ''),
	('permit_view_q_page', '150'),
	('permit_view_special_users_page', '40'),
	('permit_view_special_users_page_points', ''),
	('permit_view_voters_flaggers', '20'),
	('permit_view_voters_flaggers_points', ''),
	('permit_vote_a', '120'),
	('permit_vote_a_points', ''),
	('permit_vote_down', '120'),
	('permit_vote_down_points', ''),
	('permit_vote_q', '120'),
	('permit_vote_q_points', ''),
	('points_a_selected', '30'),
	('points_a_voted_max_gain', '20'),
	('points_a_voted_max_loss', '5'),
	('points_base', '100'),
	('points_c_voted_max_gain', '10'),
	('points_c_voted_max_loss', '3'),
	('points_multiple', '10'),
	('points_per_a_voted', ''),
	('points_per_a_voted_down', '2'),
	('points_per_a_voted_up', '2'),
	('points_per_c_voted_down', '0'),
	('points_per_c_voted_up', '0'),
	('points_per_q_voted', ''),
	('points_per_q_voted_down', '1'),
	('points_per_q_voted_up', '1'),
	('points_post_a', '4'),
	('points_post_q', '2'),
	('points_q_voted_max_gain', '10'),
	('points_q_voted_max_loss', '3'),
	('points_select_a', '3'),
	('points_to_titles', ''),
	('points_vote_down_a', '1'),
	('points_vote_down_q', '1'),
	('points_vote_on_a', ''),
	('points_vote_on_q', ''),
	('points_vote_up_a', '1'),
	('points_vote_up_q', '1'),
	('q_urls_remove_accents', ''),
	('q_urls_title_length', '50'),
	('recalc_hotness_q_view', '1'),
	('register_notify_admin', ''),
	('register_terms', 'I agree to the Activiacademy Q&amp;A Terms &amp; Conditions and Privacy Policy'),
	('search_module', ''),
	('show_a_c_links', '1'),
	('show_a_form_immediate', 'if_no_as'),
	('show_compact_numbers', '1'),
	('show_custom_answer', '0'),
	('show_custom_ask', '0'),
	('show_custom_comment', '0'),
	('show_custom_footer', ''),
	('show_custom_header', ''),
	('show_custom_home', ''),
	('show_custom_in_head', ''),
	('show_custom_register', ''),
	('show_custom_sidebar', '1'),
	('show_custom_sidepanel', ''),
	('show_custom_welcome', '0'),
	('show_c_reply_buttons', '1'),
	('show_fewer_cs_count', '5'),
	('show_fewer_cs_from', '10'),
	('show_full_date_days', '7'),
	('show_home_description', ''),
	('show_message_history', '1'),
	('show_notice_visitor', ''),
	('show_notice_welcome', ''),
	('show_post_update_meta', '1'),
	('show_register_terms', '0'),
	('show_selected_first', '1'),
	('show_url_links', '1'),
	('show_user_points', '1'),
	('show_user_titles', '1'),
	('show_view_counts', '0'),
	('show_view_count_q_page', '0'),
	('show_when_created', '1'),
	('site_language', ''),
	('site_maintenance', '0'),
	('site_text_direction', 'ltr'),
	('site_theme', 'SnowFlat'),
	('site_theme_mobile', 'SnowFlat'),
	('site_title', 'AskMe'),
	('site_url', 'https://www.activiacademy.com/askme/'),
	('smtp_active', ''),
	('smtp_address', ''),
	('smtp_authenticate', ''),
	('smtp_password', ''),
	('smtp_port', '25'),
	('smtp_secure', ''),
	('smtp_username', ''),
	('sort_answers_by', 'created'),
	('suspend_register_users', ''),
	('tags_or_categories', 'tc'),
	('tag_separator_comma', '0'),
	('use_microdata', '1'),
	('votes_separated', ''),
	('voting_on_as', '1'),
	('voting_on_cs', '0'),
	('voting_on_qs', '1'),
	('voting_on_q_page_only', ''),
	('wysiwyg_editor_upload_images', '');

-- Dumping structure for table fullsm3q_askme.pages
CREATE TABLE IF NOT EXISTS `pages` (
  `pageid` smallint(5) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(80) NOT NULL,
  `nav` char(1) CHARACTER SET ascii NOT NULL,
  `position` smallint(5) unsigned NOT NULL,
  `flags` tinyint(3) unsigned NOT NULL,
  `permit` tinyint(3) unsigned DEFAULT NULL,
  `tags` varchar(200) NOT NULL,
  `heading` varchar(800) DEFAULT NULL,
  `content` mediumtext,
  PRIMARY KEY (`pageid`),
  UNIQUE KEY `position` (`position`),
  KEY `tags` (`tags`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table fullsm3q_askme.pages: ~0 rows (approximately)
DELETE FROM `pages`;

-- Dumping structure for table fullsm3q_askme.postmetas
CREATE TABLE IF NOT EXISTS `postmetas` (
  `postid` int(10) unsigned NOT NULL,
  `title` varchar(40) NOT NULL,
  `content` varchar(8000) NOT NULL,
  PRIMARY KEY (`postid`,`title`),
  CONSTRAINT `postmetas_ibfk_1` FOREIGN KEY (`postid`) REFERENCES `posts` (`postid`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table fullsm3q_askme.postmetas: ~0 rows (approximately)
DELETE FROM `postmetas`;

-- Dumping structure for table fullsm3q_askme.posts
CREATE TABLE IF NOT EXISTS `posts` (
  `postid` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `type` enum('Q','A','C','Q_HIDDEN','A_HIDDEN','C_HIDDEN','Q_QUEUED','A_QUEUED','C_QUEUED','NOTE') NOT NULL,
  `parentid` int(10) unsigned DEFAULT NULL,
  `categoryid` int(10) unsigned DEFAULT NULL,
  `catidpath1` int(10) unsigned DEFAULT NULL,
  `catidpath2` int(10) unsigned DEFAULT NULL,
  `catidpath3` int(10) unsigned DEFAULT NULL,
  `acount` smallint(5) unsigned NOT NULL DEFAULT '0',
  `amaxvote` smallint(5) unsigned NOT NULL DEFAULT '0',
  `selchildid` int(10) unsigned DEFAULT NULL,
  `closedbyid` int(10) unsigned DEFAULT NULL,
  `userid` int(10) unsigned DEFAULT NULL,
  `cookieid` bigint(20) unsigned DEFAULT NULL,
  `createip` varbinary(16) DEFAULT NULL,
  `lastuserid` int(10) unsigned DEFAULT NULL,
  `lastip` varbinary(16) DEFAULT NULL,
  `upvotes` smallint(5) unsigned NOT NULL DEFAULT '0',
  `downvotes` smallint(5) unsigned NOT NULL DEFAULT '0',
  `netvotes` smallint(6) NOT NULL DEFAULT '0',
  `lastviewip` varbinary(16) DEFAULT NULL,
  `views` int(10) unsigned NOT NULL DEFAULT '0',
  `hotness` float DEFAULT NULL,
  `flagcount` tinyint(3) unsigned NOT NULL DEFAULT '0',
  `format` varchar(20) CHARACTER SET ascii NOT NULL DEFAULT '',
  `created` datetime NOT NULL,
  `updated` datetime DEFAULT NULL,
  `updatetype` char(1) CHARACTER SET ascii DEFAULT NULL,
  `title` varchar(800) DEFAULT NULL,
  `content` varchar(12000) DEFAULT NULL,
  `tags` varchar(800) DEFAULT NULL,
  `name` varchar(40) DEFAULT NULL,
  `notify` varchar(80) DEFAULT NULL,
  PRIMARY KEY (`postid`),
  KEY `type` (`type`,`created`),
  KEY `type_2` (`type`,`acount`,`created`),
  KEY `type_4` (`type`,`netvotes`,`created`),
  KEY `type_5` (`type`,`views`,`created`),
  KEY `type_6` (`type`,`hotness`),
  KEY `type_7` (`type`,`amaxvote`,`created`),
  KEY `parentid` (`parentid`,`type`),
  KEY `userid` (`userid`,`type`,`created`),
  KEY `selchildid` (`selchildid`,`type`,`created`),
  KEY `closedbyid` (`closedbyid`),
  KEY `catidpath1` (`catidpath1`,`type`,`created`),
  KEY `catidpath2` (`catidpath2`,`type`,`created`),
  KEY `catidpath3` (`catidpath3`,`type`,`created`),
  KEY `categoryid` (`categoryid`,`type`,`created`),
  KEY `createip` (`createip`,`created`),
  KEY `updated` (`updated`,`type`),
  KEY `flagcount` (`flagcount`,`created`,`type`),
  KEY `catidpath1_2` (`catidpath1`,`updated`,`type`),
  KEY `catidpath2_2` (`catidpath2`,`updated`,`type`),
  KEY `catidpath3_2` (`catidpath3`,`updated`,`type`),
  KEY `categoryid_2` (`categoryid`,`updated`,`type`),
  KEY `lastuserid` (`lastuserid`,`updated`,`type`),
  KEY `lastip` (`lastip`,`updated`,`type`),
  CONSTRAINT `posts_ibfk_1` FOREIGN KEY (`userid`) REFERENCES `users` (`userid`) ON DELETE SET NULL,
  CONSTRAINT `posts_ibfk_2` FOREIGN KEY (`parentid`) REFERENCES `posts` (`postid`),
  CONSTRAINT `posts_ibfk_3` FOREIGN KEY (`categoryid`) REFERENCES `categories` (`categoryid`) ON DELETE SET NULL,
  CONSTRAINT `posts_ibfk_4` FOREIGN KEY (`closedbyid`) REFERENCES `posts` (`postid`)
) ENGINE=InnoDB AUTO_INCREMENT=51 DEFAULT CHARSET=utf8;

-- Dumping data for table fullsm3q_askme.posts: ~47 rows (approximately)
DELETE FROM `posts`;
INSERT INTO `posts` (`postid`, `type`, `parentid`, `categoryid`, `catidpath1`, `catidpath2`, `catidpath3`, `acount`, `amaxvote`, `selchildid`, `closedbyid`, `userid`, `cookieid`, `createip`, `lastuserid`, `lastip`, `upvotes`, `downvotes`, `netvotes`, `lastviewip`, `views`, `hotness`, `flagcount`, `format`, `created`, `updated`, `updatetype`, `title`, `content`, `tags`, `name`, `notify`) VALUES
	(1, 'Q', NULL, NULL, NULL, NULL, NULL, 1, 0, 2, NULL, 1, NULL, _binary 0x3125ca72, 1, _binary 0x3125ca72, 0, 0, 0, _binary 0x3125ca72, 1, 81206800000, 0, '', '2022-11-12 12:29:19', '2022-11-12 12:33:47', 'C', 'Why is Java a platform independent language?', '', 'java,core', NULL, NULL),
	(2, 'A', 1, NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, 1, NULL, _binary 0x3125ca72, 1, _binary 0x3125ca72, 0, 0, 0, NULL, 0, NULL, 0, 'html', '2022-11-12 12:30:02', '2022-11-12 12:33:47', 'S', NULL, '<p>Java Language as developed in such a way that it does not depend on any hardware or software due to the fact that the compiler compiles the code and then converts it to platform-independent byte code which can be run on multiple systems.</p><ul><li>The only condition to run that byte code is for the machine to have a runtime environment (JRE) installed in it</li></ul>', NULL, NULL, NULL),
	(3, 'Q', NULL, NULL, NULL, NULL, NULL, 1, 0, NULL, NULL, 1, NULL, _binary 0x3125ca72, 1, _binary 0x3125ca72, 0, 0, 0, _binary 0x3125ca72, 1, 81206900000, 0, '', '2022-11-12 12:35:22', '2022-11-12 12:38:27', 'T', 'Why is Java not a pure object oriented language ?', '', 'java,core', NULL, NULL),
	(4, 'A', 3, NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, 1, NULL, _binary 0x3125ca72, NULL, NULL, 0, 0, 0, NULL, 0, NULL, 0, 'html', '2022-11-12 12:35:33', NULL, NULL, NULL, '<p><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial; letter-spacing:0.1px">Java supports primitive data types - byte, boolean, char, short, int, float, long, and double and hence it is not a pure</span></p>', NULL, NULL, NULL),
	(5, 'Q', NULL, NULL, NULL, NULL, NULL, 1, 0, NULL, NULL, 1, NULL, _binary 0x3125ca72, NULL, NULL, 0, 0, 0, _binary 0x3125ca72, 1, 81207000000, 0, '', '2022-11-12 12:37:49', NULL, NULL, 'Difference between Heap and Stack Memory in java. And how java utilizes this ?', '', 'java,core', NULL, NULL),
	(6, 'A', 5, NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, 1, NULL, _binary 0x3125ca72, 1, _binary 0x3125ca72, 0, 0, 0, NULL, 0, NULL, 0, 'html', '2022-11-12 12:41:15', '2022-11-12 12:44:27', 'E', NULL, '<p><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial">Stack memory is the portion of memory that was assigned to every individual program. And it was fixed. On the other hand, Heap memory is the portion that was not allocated to the java program but it will be available for use by the java program when it is required, mostly during the runtime of the program.</span></p><p><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial">Java Utilizes this memory as -&nbsp;</span></p><ul><li>When we write a java program then all the variables, methods, etc are stored in the stack memory.</li><li>And when we create any object in the java program then that object was created in the heap memory. And it was referenced from the stack memory.</li></ul><div><div><span style="font-family:Courier New,Courier,monospace"><strong>class Main {</strong></span></div><div><span style="font-family:Courier New,Courier,monospace"><strong>&nbsp; &nbsp;public void printArray(int[] array){</strong></span></div><div><span style="font-family:Courier New,Courier,monospace"><strong>&nbsp; &nbsp; &nbsp; &nbsp;for(int i : array)</strong></span></div><div><span style="font-family:Courier New,Courier,monospace"><strong>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(i);</strong></span></div><div><span style="font-family:Courier New,Courier,monospace"><strong>&nbsp; &nbsp;}</strong></span></div><div><span style="font-family:Courier New,Courier,monospace"><strong>&nbsp; &nbsp;public static void main(String args[]) {</strong></span></div><div><span style="font-family:Courier New,Courier,monospace"><strong>&nbsp; &nbsp; &nbsp; &nbsp;int[] array = new int[10];</strong></span></div><div><span style="font-family:Courier New,Courier,monospace"><strong>&nbsp; &nbsp; &nbsp; &nbsp;printArray(array);</strong></span></div><div><span style="font-family:Courier New,Courier,monospace"><strong>&nbsp; &nbsp;}</strong></span></div><div><span style="font-family:Courier New,Courier,monospace"><strong>}</strong></span></div></div><ul><li><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial">Main and PrintArray is the method that will be available in the stack area and as well as the variables declared that will also be in the stack area.</span></li><li><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial">And the Object (Integer Array of size 10) we have created, will be available in the Heap area because that space will be allocated to the program during runtime.</span></li></ul><p></p>', NULL, NULL, NULL),
	(7, 'Q', NULL, NULL, NULL, NULL, NULL, 1, 0, NULL, NULL, 1, NULL, _binary 0x3125ca72, NULL, NULL, 0, 0, 0, _binary 0x3125ca72, 1, 81207100000, 0, '', '2022-11-12 12:52:25', NULL, NULL, 'Can java be said to be the complete object-oriented programming language?', '', 'java', NULL, NULL),
	(8, 'A', 7, NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, 1, NULL, _binary 0x3125ca72, NULL, NULL, 0, 0, 0, NULL, 0, NULL, 0, 'html', '2022-11-12 12:52:49', NULL, NULL, NULL, '<p style="box-sizing: inherit; margin: 0px 0px 2rem; letter-spacing: 0.1px; font-family: -apple-system, system-ui, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, &quot;Source Sans Pro&quot;, Helvetica, Arial; line-height: 1.5; color: rgb(55, 62, 63);">It is not wrong if we claim that java is the complete object-oriented programming language. Because Everything in Java is under the classes. And we can access that by creating the objects.</p><p style="box-sizing: inherit; margin: 0px 0px 2rem; letter-spacing: 0.1px; font-family: -apple-system, system-ui, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, &quot;Source Sans Pro&quot;, Helvetica, Arial; line-height: 1.5; color: rgb(55, 62, 63);">But also if we say that java is not a completely object-oriented programming language because it has the support of primitive data types like int, float, char, boolean, double, etc.</p><p style="box-sizing: inherit; margin: 0px 0px 2rem; letter-spacing: 0.1px; font-family: -apple-system, system-ui, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, &quot;Source Sans Pro&quot;, Helvetica, Arial; line-height: 1.5; color: rgb(55, 62, 63);">Now for the question:&nbsp;Is java a completely object-oriented programming language?&nbsp;</p><p style="box-sizing: inherit; margin: 0px 0px 2rem; letter-spacing: 0.1px; font-family: -apple-system, system-ui, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, &quot;Source Sans Pro&quot;, Helvetica, Arial; line-height: 1.5; color: rgb(55, 62, 63);">We can say that - Java is not a pure object-oriented programming language, because it has direct access to primitive data types. And these primitive data types don\'t directly belong to the Integer classes.</p>', NULL, NULL, NULL),
	(9, 'Q', NULL, NULL, NULL, NULL, NULL, 1, 0, NULL, NULL, 1, NULL, _binary 0x3125ca72, NULL, NULL, 0, 0, 0, _binary 0x3125ca72, 1, 81207200000, 0, '', '2022-11-12 12:56:15', NULL, NULL, 'How is Java different from C++?', '', 'java', NULL, NULL),
	(10, 'A', 9, NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, 1, NULL, _binary 0x3125ca72, NULL, NULL, 0, 0, 0, NULL, 0, NULL, 0, 'html', '2022-11-12 12:57:01', NULL, NULL, NULL, '<ol><li>C++ is only a&nbsp; compiled language, whereas Java is compiled as well as an interpreted language.</li><li>Java programs are machine-independent whereas a c++ program can run only in the machine in which it is compiled.&nbsp;</li><li>C++ allows users to use pointers in the program. Whereas java doesn’t allow it. Java internally uses pointers.&nbsp;</li><li>C++ supports the concept of Multiple inheritances whereas Java doesn\'t support this. And it is due to avoiding the complexity of name ambiguity that causes the diamond problem.</li></ol>', NULL, NULL, NULL),
	(11, 'Q', NULL, NULL, NULL, NULL, NULL, 1, 0, NULL, NULL, 1, NULL, _binary 0x3125ca72, NULL, NULL, 0, 0, 0, _binary 0x3125ca72, 1, 81207200000, 0, '', '2022-11-12 12:58:05', NULL, NULL, 'Pointers are used in C/ C++. Why does Java not make use of pointers?', '', 'java', NULL, NULL),
	(12, 'A', 11, NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, 1, NULL, _binary 0x3125ca72, NULL, NULL, 0, 0, 0, NULL, 0, NULL, 0, 'html', '2022-11-12 12:58:25', NULL, NULL, NULL, '<p style="box-sizing: inherit; margin: 0px 0px 2rem; letter-spacing: 0.1px; font-family: -apple-system, system-ui, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, &quot;Source Sans Pro&quot;, Helvetica, Arial; line-height: 1.5; color: rgb(55, 62, 63);">Pointers are quite complicated and unsafe to use by beginner programmers. Java focuses on code simplicity, and the usage of pointers can make it challenging. Pointer utilization can also cause potential errors. Moreover, security is also compromised if pointers are used because the users can directly access memory with the help of pointers.</p><p style="box-sizing: inherit; margin: 0px 0px 2rem; letter-spacing: 0.1px; font-family: -apple-system, system-ui, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, &quot;Source Sans Pro&quot;, Helvetica, Arial; line-height: 1.5; color: rgb(55, 62, 63);">Thus, a certain level of abstraction is furnished by not including pointers in Java. Moreover, the usage of pointers can make the procedure of garbage collection quite slow and erroneous. Java makes use of references as these cannot be manipulated, unlike pointers</p>', NULL, NULL, NULL),
	(13, 'Q', NULL, NULL, NULL, NULL, NULL, 1, 0, NULL, NULL, 1, NULL, _binary 0x3125ca72, NULL, NULL, 0, 0, 0, _binary 0x3125ca72, 1, 81207300000, 0, '', '2022-11-12 13:09:45', NULL, NULL, 'What do you understand by an instance variable and a local variable?', '', 'java', NULL, NULL),
	(14, 'A', 13, NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, 1, NULL, _binary 0x3125ca72, 1, _binary 0x3125ca72, 0, 0, 0, NULL, 0, NULL, 0, 'html', '2022-11-12 13:14:05', '2022-11-12 18:04:42', 'E', NULL, '<p><strong>Instance variables </strong>are those variables that are accessible by all the methods in the class. They are declared outside the methods and inside the class. These variables describe the properties of an object and remain bound to it at any cost.</p><p>All the objects of the class will have their copy of the variables for utilization. If any modification is done on these variables, then only that instance will be impacted by it, and all other class instances continue to remain unaffected.</p><p><span style="color:#444444; font-family:monospace,monospace; font-size:14px"><strong>class</strong> <strong>Athlete</strong> </span><span style="background-color:#f5f8ff; color:#444444; font-family:monospace,monospace; font-size:14px">{&nbsp;</span></p><p><strong>&nbsp; &nbsp; public</strong><span style="background-color:#f5f8ff; color:#444444; font-family:monospace,monospace; font-size:14px"> String athleteName;&nbsp;</span></p><p><strong>&nbsp; &nbsp; public</strong><span style="background-color:#f5f8ff; color:#444444; font-family:monospace,monospace; font-size:14px"> </span><strong>double</strong><span style="background-color:#f5f8ff; color:#444444; font-family:monospace,monospace; font-size:14px"> athleteSpeed;&nbsp;</span></p><p><strong>&nbsp; &nbsp; public</strong><span style="background-color:#f5f8ff; color:#444444; font-family:monospace,monospace; font-size:14px"> </span><strong>int</strong><span style="background-color:#f5f8ff; color:#444444; font-family:monospace,monospace; font-size:14px"> athleteAge;&nbsp;</span></p><p><span style="background-color:#f5f8ff; color:#444444; font-family:monospace,monospace; font-size:14px">}</span></p><p><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial">Local variables</span><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial">&nbsp;are those variables present within a block, function, or constructor and can be accessed only inside them. The utilization of the variable is restricted to the block scope. Whenever a local variable is declared inside a method, the other class methods don’t have any knowledge about the local variable.</span></p><p><span style="color:#444444; font-family:monospace,monospace; font-size:14px"><strong>public</strong> <strong>void</strong> <strong>athlete</strong><span style="font-size:1.4rem">()</span> </span><span style="background-color:#f5f8ff; color:#444444; font-family:monospace,monospace; font-size:14px">{&nbsp;</span></p><p><span style="background-color:#ffffff"><strong>&nbsp; &nbsp; String&nbsp;</strong></span><span style="background-color:#f5f8ff; color:#444444; font-family:monospace,monospace; font-size:14px">athleteName;&nbsp;</span></p><p><strong>&nbsp; &nbsp; double</strong><span style="background-color:#f5f8ff; color:#444444; font-family:monospace,monospace; font-size:14px"> athleteSpeed;&nbsp;</span></p><p><strong>&nbsp; &nbsp; int</strong><span style="background-color:#f5f8ff; color:#444444; font-family:monospace,monospace; font-size:14px"> athleteAge;&nbsp;</span></p><p><span style="background-color:#f5f8ff; color:#444444; font-family:monospace,monospace; font-size:14px">}</span></p>', NULL, NULL, NULL),
	(15, 'Q', NULL, NULL, NULL, NULL, NULL, 1, 0, NULL, NULL, 1, NULL, _binary 0x3125c9fa, NULL, NULL, 0, 0, 0, _binary 0x3125c9fa, 1, 81221000000, 0, '', '2022-11-13 08:07:42', NULL, NULL, 'What are the default values assigned to variables and instances in java ?', '', 'java', NULL, NULL),
	(16, 'A', 15, NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, 1, NULL, _binary 0x3125c9fa, 1, _binary 0x3125c9fa, 0, 0, 0, NULL, 0, NULL, 0, 'html', '2022-11-13 08:08:23', '2022-11-13 08:09:30', 'E', NULL, '<ul><li>There are no default values assigned to the variables in java. We need to initialize the value before using it. Otherwise, it will throw a compilation error of (Variable might not be initialized)</li><li>But for instance, if we create the object, then the default value will be initialized by the default constructor depending on the data type</li><li>If it is a reference, then it will be assigned to null</li><li>If it is numeric, then it will assign to 0</li><li>If it is a boolean, then it will be assigned to false. Etc</li></ul>', NULL, NULL, NULL),
	(17, 'Q', NULL, NULL, NULL, NULL, NULL, 1, 0, NULL, NULL, 1, NULL, _binary 0x3125c9fa, NULL, NULL, 0, 0, 0, _binary 0x3125c9fa, 1, 81221300000, 0, '', '2022-11-13 08:30:38', NULL, NULL, 'Can you tell the difference between equals() method and equality operator (==) in Java?', '', 'java', NULL, NULL),
	(18, 'A', 17, NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, 1, NULL, _binary 0x3125c9fa, 1, _binary 0x3125c9fa, 0, 0, 0, NULL, 0, NULL, 0, 'html', '2022-11-13 08:38:38', '2022-11-13 08:39:01', 'E', NULL, '<p><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial">We are already aware of the&nbsp;</span><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial">(==) equals</span><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial">&nbsp;operator. That we have used this to compare the equality of the values. But when we talk about the terms of object-oriented programming, we deal with the values in the form of objects. And this object may contain multiple types of data. So using the&nbsp;</span><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial">(==) operator</span><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial">&nbsp;does not work in this case. So we need to go with the .</span><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial">equals() method.</span></p><p><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial">Both&nbsp;[(==)&nbsp;and&nbsp;.equals()]&nbsp;primary functionalities are to compare the values, but the secondary functionality is different.&nbsp;</span></p><p><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial">So in order to understand this better, let’s consider this with the example -</span></p><p><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial"><span style="background-color:#f5f8ff; color:#444444; font-family:monospace,monospace; font-size:14px">String str1 = </span><span style="color:#880000; font-family:monospace,monospace; font-size:14px">"InterviewBit"</span><span style="background-color:#f5f8ff; color:#444444; font-family:monospace,monospace; font-size:14px">;&nbsp;</span></span></p><p><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial"><span style="background-color:#f5f8ff; color:#444444; font-family:monospace,monospace; font-size:14px">String str2 = </span><span style="color:#880000; font-family:monospace,monospace; font-size:14px">"InterviewBit"</span><span style="background-color:#f5f8ff; color:#444444; font-family:monospace,monospace; font-size:14px">;&nbsp;</span></span></p><p><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial"><span style="background-color:#f5f8ff; color:#444444; font-family:monospace,monospace; font-size:14px">System.out.println(str1 == str2);</span></span></p><p><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial">This code will print true. We know that both strings are equals so it will print true. But here&nbsp;(==) Operators&nbsp;don’t compare each character in this case. It compares the memory location. And because the string uses the constant pool for storing the values in the memory, both&nbsp;str1&nbsp;and&nbsp;str2&nbsp;are stored at the same memory location.</span></p><p><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial">Now, if we modify the program a little bit with -</span></p><p><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial"><span style="background-color:#f5f8ff; color:#444444; font-family:monospace,monospace; font-size:14px">String str1 = </span><span style="color:#444444; font-family:monospace,monospace; font-size:14px">new</span><span style="background-color:#f5f8ff; color:#444444; font-family:monospace,monospace; font-size:14px"> String(</span><span style="color:#880000; font-family:monospace,monospace; font-size:14px">"InterviewBit"</span><span style="background-color:#f5f8ff; color:#444444; font-family:monospace,monospace; font-size:14px">);&nbsp;</span></span></p><p><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial"><span style="background-color:#f5f8ff; color:#444444; font-family:monospace,monospace; font-size:14px">String str2 = </span><span style="color:#880000; font-family:monospace,monospace; font-size:14px">"InterviewBit"</span><span style="background-color:#f5f8ff; color:#444444; font-family:monospace,monospace; font-size:14px">;&nbsp;</span></span></p><p><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial"><span style="background-color:#f5f8ff; color:#444444; font-family:monospace,monospace; font-size:14px">System.out.println(str1 == str2);</span></span></p><table border="1" cellpadding="1" style="width:500px"><tbody><tr><td style="text-align:center"><strong>equals()</strong></td><td style="text-align:center"><strong>==</strong></td></tr><tr><td>This is a method defined in the Object class</td><td>It is a binary operator in Java</td></tr><tr><td>The .equals() Method is present in the Object class, so we can override our custom .equals() method in the custom class, for objects comparison.</td><td>It cannot be modified. They always compare the HashCode.</td></tr><tr><td>This method is used for checking the equality of contents between two objects as per the specified business logic.</td><td>This operator is used for comparing addresses (or references), i.e checks if both the objects are pointing to the same memory location.</td></tr></tbody></table><p></p><p></p><p></p>', NULL, NULL, NULL),
	(19, 'Q', NULL, NULL, NULL, NULL, NULL, 1, 0, NULL, NULL, 1, NULL, _binary 0x3125c9fa, NULL, NULL, 0, 0, 0, _binary 0x3125c9fa, 1, 81221400000, 0, '', '2022-11-13 08:41:39', NULL, NULL, 'How is an infinite loop declared in Java?', '', 'java', NULL, NULL),
	(20, 'A', 19, NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, 1, NULL, _binary 0x3125c9fa, 1, _binary 0x3125c9fa, 0, 0, 0, NULL, 0, NULL, 0, 'html', '2022-11-13 08:43:36', '2022-11-13 08:44:58', 'E', NULL, '<p><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial">Infinite loops are those loops that run infinitely without any breaking conditions. Some examples of consciously declaring infinite loop is</span></p><ul><li><strong><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial">Using for loop:</span></strong></li></ul><p><span style="font-family:Courier New,Courier,monospace">for (;;) {&nbsp;</span></p><p><span style="font-family:Courier New,Courier,monospace">// Business logic&nbsp;</span></p><p><span style="font-family:Courier New,Courier,monospace">// Any break logic&nbsp;</span></p><p><span style="font-family:Courier New,Courier,monospace">}</span></p><ul><li><strong>Using while loop:</strong></li></ul><p><span style="font-family:Courier New, Courier, monospace">while(true){</span></p><p><span style="font-family:Courier New, Courier, monospace">&nbsp; &nbsp;// Business logic</span></p><p><span style="font-family:Courier New, Courier, monospace">&nbsp; &nbsp;// Any break logic</span></p><p></p><p><span style="font-family:Courier New, Courier, monospace">}</span></p><ul><li><strong>Using do while loop</strong></li></ul><p><span style="font-family:Courier New, Courier, monospace">do{</span></p><p><span style="font-family:Courier New, Courier, monospace">&nbsp; &nbsp;// Business logic</span></p><p><span style="font-family:Courier New, Courier, monospace">&nbsp; &nbsp;// Any break logic</span></p><p></p><p><span style="font-family:Courier New, Courier, monospace">}while(true);</span></p>', NULL, NULL, NULL),
	(21, 'Q', NULL, NULL, NULL, NULL, NULL, 1, 0, NULL, NULL, 1, NULL, _binary 0x3125c9fa, NULL, NULL, 0, 0, 0, _binary 0x3125c9fa, 1, 81221400000, 0, '', '2022-11-13 08:45:45', NULL, NULL, 'Briefly explain the concept of constructor overloading', '', 'java', NULL, NULL),
	(22, 'A', 21, NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, 1, NULL, _binary 0x3125c9fa, 1, _binary 0x3125c9fa, 0, 0, 0, NULL, 0, NULL, 0, 'html', '2022-11-13 08:45:55', '2022-11-13 08:50:59', 'E', NULL, '<p><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial">Constructor overloading is the process of creating multiple constructors in the class consisting of the same name with a difference in the constructor parameters. Depending upon the number of parameters and their corresponding types, distinguishing of the different types of constructors is done by the compiler.</span></p><pre>class Hospital { \n   int variable1, variable2; \n   double variable3;</pre><pre>   public Hospital(int doctors, int nurses) { \n       variable1 = doctors; \n       variable2 = nurses; \n   }</pre><pre>    public Hospital(int doctors) { \n        variable1 = doctors; \n    }</pre><pre>    public Hospital(double salaries) { \n        variable3 = salaries \n    }\n</pre><pre>}</pre><p><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial">Three constructors are defined here but they differ on the basis of parameter type and their numbers.</span></p>', NULL, NULL, NULL),
	(23, 'Q', NULL, NULL, NULL, NULL, NULL, 1, 0, NULL, NULL, 1, NULL, _binary 0x3125c9fa, NULL, NULL, 0, 0, 0, _binary 0x3125c9fa, 1, 81221500000, 0, '', '2022-11-13 08:51:47', NULL, NULL, 'Can the main method be Overloaded?', '', 'java', NULL, NULL),
	(24, 'A', 23, NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, 1, NULL, _binary 0x3125c9fa, 1, _binary 0x3125c9fa, 0, 0, 0, NULL, 0, NULL, 0, 'html', '2022-11-13 08:52:10', '2022-11-13 08:56:42', 'E', NULL, '<p><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial">Yes, It is possible to overload the main method. We can create as many overloaded main methods we want. However, JVM has a predefined calling method that JVM will only call the main method with the definition of -&nbsp;</span></p><pre><span style="font-family:Tahoma,Geneva,sans-serif">public static void main(string[] args)</span></pre><p><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial">Consider the below code snippets:</span></p><pre><span style="font-family:Tahoma,Geneva,sans-serif"><span style="font-size:11px"><span style="color:#444444">class Main {</span>\n<span style="color:#444444">    public static void main(String args[]) {</span>\n<span style="color:#444444">        System.out.println(" Main Method");</span>\n<span style="color:#444444">    }</span>\n<span style="color:#444444">    public static void main(int[] args){</span>\n<span style="color:#444444">        System.out.println("Overloaded Integer array Main Method");</span>\n<span style="color:#444444">    }</span>\n<span style="color:#444444">    public static void main(char[] args){</span>\n<span style="color:#444444">        System.out.println("Overloaded Character array Main Method");</span>\n<span style="color:#444444">    }</span>\n<span style="color:#444444">    public static int main(double[] args){</span>\n<span style="color:#444444">        System.out.println("Overloaded Double array Main Method");</span>\n<span style="color:#444444">    }</span>\n<span style="color:#444444">    public static void main(float args){</span>\n<span style="color:#444444">        System.out.println("Overloaded float Main Method");</span>\n<span style="color:#444444">    }</span>\n<span style="color:#444444">}</span></span></span></pre>', NULL, NULL, NULL),
	(25, 'Q', NULL, NULL, NULL, NULL, NULL, 1, 0, NULL, NULL, 1, NULL, _binary 0x3125c9fa, NULL, NULL, 0, 0, 0, _binary 0x3125c9fa, 1, 81221600000, 0, '', '2022-11-13 08:57:37', NULL, NULL, 'Comment on method overloading and overriding by citing relevant examples.', '', 'java', NULL, NULL),
	(26, 'A', 25, NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, 1, NULL, _binary 0x3125c9fa, 1, _binary 0x3125c9fa, 0, 0, 0, NULL, 0, NULL, 0, 'html', '2022-11-13 08:58:48', '2022-11-13 09:02:46', 'E', NULL, '<p>In Java,&nbsp;method overloading&nbsp;is made possible by introducing different methods in the same class consisting of the same name. Still, all the functions differ in the number or type of parameters. It takes place inside a class and enhances program readability.</p><p>The only difference in the return type of the method does not promote method overloading. The following example will furnish you with a clear picture of it.</p><pre><span style="font-family:Tahoma,Geneva,sans-serif"><span style="color:#373e3f">class OverloadingHelp {</span>\n<span style="color:#373e3f">   public int findarea (int l, int b) {</span>\n<span style="color:#373e3f">           int var1;</span>\n<span style="color:#373e3f">           var1 = l * b;</span>\n<span style="color:#373e3f">           return var1;</span>\n<span style="color:#373e3f">   }</span>\n\n<span style="color:#373e3f">   public int findarea (int l, int b, int h) {</span>\n<span style="color:#373e3f">           int var2;</span>\n<span style="color:#373e3f">           var2 = l * b * h;</span>\n<span style="color:#373e3f">           return var2;</span>\n<span style="color:#373e3f">   }</span>\n<span style="color:#373e3f">}</span></span></pre><p>Both the functions have the same name but differ in the number of arguments. The first method calculates the area of the rectangle, whereas the second method calculates the area of a cuboid.</p><p>Method overriding&nbsp;is the concept in which two methods having the same method signature are present in two different classes in which an inheritance relationship is present. A particular method implementation (already present in the base class) is possible for the derived class by using method overriding.&nbsp;</p><p><span style="color:#333333; font-family:sans-serif,Arial,Verdana,&quot;Trebuchet MS&quot;,&quot;Apple Color Emoji&quot;,&quot;Segoe UI Emoji&quot;,&quot;Segoe UI Symbol&quot;">Let’s give a look at this example:</span></p><pre><span style="font-family:Tahoma,Geneva,sans-serif">class HumanBeing {\n	public int walk (int distance, int time) {\n		int speed = distance / time;\n		return speed;\n	}\n}\nclass Athlete extends HumanBeing {\n	public int walk(int distance, int time) {\n		int speed = distance / time;\n		speed = speed * 2;\n		return speed;\n	}\n}</span>\n</pre>', NULL, NULL, NULL),
	(27, 'Q', NULL, NULL, NULL, NULL, NULL, 1, 0, NULL, NULL, 1, NULL, _binary 0x3125c9fa, NULL, NULL, 0, 0, 0, _binary 0x3125c9fa, 1, 81222800000, 0, '', '2022-11-13 10:35:50', NULL, NULL, 'Explain the use of final keyword in variable, method and class.', '', 'java', NULL, NULL),
	(28, 'A', 27, NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, 1, NULL, _binary 0x3125c9fa, NULL, NULL, 0, 0, 0, NULL, 0, NULL, 0, 'html', '2022-11-13 10:36:48', NULL, NULL, NULL, '<ul><li><strong>final variable:</strong></li></ul><p>When a variable is declared as final in Java, the value can’t be modified once it has been assigned.</p><p>If any value has not been assigned to that variable, then it can be assigned only by the constructor of the class.</p><ul><li><strong>final method:</strong></li></ul><p>A method declared as final cannot be overridden by its children\'s classes.</p><p>A constructor cannot be marked as final because whenever a class is inherited, the constructors are not inherited. Hence, marking it final doesn\'t make sense. Java throws compilation error saying - modifier final not allowed here</p><ul><li><strong>final class:</strong></li></ul><p>No classes can be inherited from the class declared as final. But that final class can extend other classes for its usage.</p>', NULL, NULL, NULL),
	(29, 'Q', NULL, NULL, NULL, NULL, NULL, 1, 0, NULL, NULL, 1, NULL, _binary 0x3125c9fa, NULL, NULL, 0, 0, 0, _binary 0x3125c9fa, 1, 81224000000, 0, '', '2022-11-13 12:09:57', NULL, NULL, 'Do final, finally and finalize keywords have the same function?', '', 'java', NULL, NULL),
	(30, 'A', 29, NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, 1, NULL, _binary 0x3125c9fa, 1, _binary 0x3125c9fa, 0, 0, 0, NULL, 0, NULL, 0, 'html', '2022-11-13 12:23:58', '2022-11-13 12:25:41', 'E', NULL, '<p><strong>Final: </strong>If any restriction is required for classes, variables, or methods, the final keyword comes in handy. Inheritance of a final class and overriding of a final method is restricted by the use of the final keyword. The variable value becomes fixed after incorporating the final keyword.&nbsp;</p><p><strong>Example:</strong></p><pre><span style="font-family:Tahoma,Geneva,sans-serif"><strong>final int a=100;</strong>\n<strong>a = 0;  // error</strong></span></pre><p>The second statement will throw an error.</p><p><strong>Finally:</strong> It is the block present in a program where all the codes written inside it get executed irrespective of handling of exceptions.</p><p><strong>Example:</strong></p><pre><span style="font-family:Tahoma,Geneva,sans-serif"><strong>try {</strong>\n<strong>    int variable = 5;</strong>\n<strong>}</strong>\n<strong>catch (Exception exception) {</strong>\n<strong>    System.out.println("Exception occurred");</strong>\n<strong>} </strong><strong>finally {</strong>\n<strong>    System.out.println("Execution of finally block");</strong>\n<strong>}</strong></span></pre><p><strong><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial">Finalize:</span></strong><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial"><strong>&nbsp;</strong>Prior to the garbage collection of an object, the finalize method is called so that the clean-up activity is implemented.&nbsp;</span></p><p><strong><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial">Example:</span></strong></p><pre><span style="font-family:Tahoma,Geneva,sans-serif"><span style="color:#373e3f"><strong>public static void main(String[] args) {</strong></span>\n    <strong>String example = new String("InterviewBit");</strong>\n    <strong>example = null;</strong>\n\n<span style="color:#373e3f"><strong>        System.gc(); // Garbage collector called</strong></span>\n<span style="color:#373e3f"><strong>}</strong></span>\n\n<span style="color:#373e3f"><strong>public void finalize() {</strong></span>\n<span style="color:#373e3f"><strong>    // Finalize called</strong></span>\n<span style="color:#373e3f"><strong>}</strong></span></span>\n</pre>', NULL, NULL, NULL),
	(31, 'Q', NULL, NULL, NULL, NULL, NULL, 1, 0, NULL, NULL, 1, NULL, _binary 0x3125c9fa, NULL, NULL, 0, 0, 0, _binary 0x3125c9fa, 1, 81224100000, 0, '', '2022-11-13 12:26:29', NULL, NULL, 'Is it possible that the ‘finally’ block will not be executed? If yes then list the case.', '', 'java', NULL, NULL),
	(32, 'A', 31, NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, 1, NULL, _binary 0x3125c9fa, 1, _binary 0x3125c9fa, 0, 0, 0, NULL, 0, NULL, 0, 'html', '2022-11-13 12:27:13', '2022-11-13 12:28:12', 'E', NULL, '<p><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial">Yes. It is possible that the ‘finally’ block will not be executed.&nbsp;</span></p><p><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial">The cases are -</span></p><ul><li><p><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial">Suppose we use&nbsp;<strong><span style="color:#515151">System.exit()</span></strong><span style="color:#515151">&nbsp;in the above statement</span></span></p></li><li><p><span style="color:#515151; font-family:-apple-system,system-ui,BlinkMacSystemFont,Segoe UI,Roboto,Source Sans Pro,Helvetica,Arial">If there are fatal errors like Stack overflow, Memory access error, etc</span></p></li></ul>', NULL, NULL, NULL),
	(33, 'Q', NULL, NULL, NULL, NULL, NULL, 1, 0, NULL, NULL, 1, NULL, _binary 0x3125c9fa, 1, _binary 0x3125c9fa, 0, 0, 0, _binary 0x3125c9fa, 1, 81224300000, 0, 'html', '2022-11-13 12:43:06', '2022-11-13 12:45:41', 'E', 'Identify the output of the java program and state the reason.', '<pre><span style="font-family:Tahoma,Geneva,sans-serif">public class InterviewBit{</span>\n   <span style="font-family:Tahoma,Geneva,sans-serif">public static void main(String[] args) {\n         final int i;\n<span style="white-space:pre">         </span>i = 20;\n<span style="white-space:pre">         </span>int j = i+20;\n<span style="white-space:pre">         </span>i = j+30;\n<span style="white-space:pre">         </span>System.out.println(i + " " + j);\n<span style="white-space:pre">     </span>}\n}</span></pre>', 'java', NULL, NULL),
	(34, 'A', 33, NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, 1, NULL, _binary 0x3125c9fa, NULL, NULL, 0, 0, 0, NULL, 0, NULL, 0, 'html', '2022-11-13 12:46:23', NULL, NULL, NULL, '<p><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial; letter-spacing:0.1px">The above code will generate a compile-time error at Line 7 saying -&nbsp;</span></p><p><span style="box-sizing:inherit; color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial; font-weight:bolder; letter-spacing:0.1px; line-height:1.5">[error: variable i might already have been initialized]</span><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial; letter-spacing:0.1px">.&nbsp;</span></p><p><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial; letter-spacing:0.1px">It is because variable ‘i’ is the final variable. And final variables are allowed to be initialized only once, and that was already done on line no 5</span></p>', NULL, NULL, NULL),
	(35, 'Q', NULL, NULL, NULL, NULL, NULL, 1, 0, NULL, NULL, 1, NULL, _binary 0x3125c9fa, NULL, NULL, 0, 0, 0, _binary 0x3125c9fa, 1, 81224400000, 0, '', '2022-11-13 12:48:09', NULL, NULL, 'When can you use super keyword?', '', 'java', NULL, NULL),
	(36, 'A', 35, NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, 1, NULL, _binary 0x3125c9fa, 1, _binary 0x3125c9fa, 0, 0, 0, NULL, 0, NULL, 0, 'html', '2022-11-13 12:55:07', '2022-11-13 12:56:25', 'E', NULL, '<ul><li>The super keyword is used to access hidden fields and overridden methods or attributes of the parent class.</li><li>Following are the cases when this keyword can be used<ul><li>Accessing data members of parent class when the member names of the class and its child subclasses are same</li><li>To call the default and parameterized constructor of the parent class inside the child class</li><li>Accessing the parent class methods when the child classes have overridden them</li></ul></li></ul><p>The following example demonstrates all 3 cases when a super keyword is used.</p><pre><span style="font-family:Tahoma,Geneva,sans-serif">public class Parent{\n     protected int num = 1;\n     Parent(){\n          System.out.println("Parent class default constructor.");\n     }\n     Parent(String x){\n          System.out.println("Parent class parameterised constructor.");\n     }\n     public void foo(){\n          System.out.println("Parent class foo!");\n     }</span>\n<span style="font-family:Tahoma,Geneva,sans-serif">}</span></pre><pre><span style="font-family:Tahoma, Geneva, sans-serif"><span style="font-family:Tahoma,Geneva,sans-serif">public class Child extends Parent{\n   private int num = 2;\n   Child(){\n	   System.out.println("Child class default Constructor");\n	   super("Call Parent");    // to call parameterised constructor.\n	   super();    // to call default parent constructor\n    }\n    void printNum(){\n	   System.out.println(num);\n	   System.out.println(super.num); //prints the value of num of parent class\n    }\n   \n    @Override\n    public void foo(){\n	   System.out.println("Parent class foo!");\n	   super.foo();    // Calls foo method of Parent class inside the Overriden foo method of Child class.\n    }\n}</span>\n</span></pre>', NULL, NULL, NULL),
	(37, 'Q', NULL, NULL, NULL, NULL, NULL, 1, 0, NULL, NULL, 1, NULL, _binary 0x3125c9fa, NULL, NULL, 0, 0, 0, _binary 0x3125c9fa, 1, 81224400000, 0, '', '2022-11-13 12:56:53', NULL, NULL, 'Can the static methods be overloaded', '', 'java', NULL, NULL),
	(38, 'A', 37, NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, 1, NULL, _binary 0x3125c9fa, NULL, NULL, 0, 0, 0, NULL, 0, NULL, 0, 'html', '2022-11-13 12:57:02', NULL, NULL, NULL, '<p><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial; letter-spacing:0.1px">Yes! There can be two or more static methods in a class with the same name but differing input parameters</span></p>', NULL, NULL, NULL),
	(39, 'Q', NULL, NULL, NULL, NULL, NULL, 1, 0, NULL, NULL, 1, NULL, _binary 0x3125c9fa, NULL, NULL, 0, 0, 0, _binary 0x3125c9fa, 1, 81224500000, 0, '', '2022-11-13 12:58:20', NULL, NULL, 'Can the static methods be overridden?', '', 'java', NULL, NULL),
	(40, 'A', 39, NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, 1, NULL, _binary 0x3125c9fa, 1, _binary 0x3125c9fa, 0, 0, 0, NULL, 0, NULL, 0, '', '2022-11-13 12:58:48', '2022-11-13 13:06:43', 'E', NULL, 'No! Declaration of static methods having the same signature can be done in the subclass but run time polymorphism can not take place in such cases.\n\nOverriding or dynamic polymorphism occurs during the runtime, but the static methods are loaded and looked up at the compile time statically. Hence, these methods cant be overridden', NULL, NULL, NULL),
	(41, 'Q', NULL, NULL, NULL, NULL, NULL, 1, 0, NULL, NULL, 1, NULL, _binary 0x3125c9fa, NULL, NULL, 0, 0, 0, _binary 0x3125c9fa, 1, 81224600000, 0, '', '2022-11-13 13:08:44', NULL, NULL, 'Difference between static methods, static variables, and static classes in java.', '', 'java', NULL, NULL),
	(42, 'A', 41, NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, 1, NULL, _binary 0x3125c9fa, 1, _binary 0x3125c9fa, 0, 0, 0, NULL, 0, NULL, 0, 'html', '2022-11-13 13:09:25', '2022-11-13 13:10:35', 'E', NULL, '<p><strong>Static Methods and Static variables</strong> are those methods and variables that belong to the class of the java program, not to the object of the class. This gets memory where the class is loaded. And these can directly be called with the help of class names.</p><p><strong>For example</strong></p><p>We have used mathematical functions in the java program like - max(), min(), sqrt(), pow(), etc. And if we notice that, then we will find that we call it directly with the class name. Like - Math.max(), Math.min(), etc. So that is a static method.&nbsp; And Similarly static variables we have used like (length) for the array to get the length. So that is the static method.</p><p><strong>Static classes</strong></p><p>A class in the java program cannot be static except if it is the inner class. If it is an inner static class, then it exactly works like other static members of the class</p>', NULL, NULL, NULL),
	(43, 'Q', NULL, NULL, NULL, NULL, NULL, 1, 0, NULL, NULL, 1, NULL, _binary 0x3125c9fa, NULL, NULL, 0, 0, 0, _binary 0x3125c9fa, 1, 81224600000, 0, '', '2022-11-13 13:10:49', NULL, NULL, 'What is the main objective of garbage collection?', '', 'java', NULL, NULL),
	(44, 'A', 43, NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, 1, NULL, _binary 0x3125c9fa, NULL, NULL, 0, 0, 0, NULL, 0, NULL, 0, 'html', '2022-11-13 13:11:17', NULL, NULL, NULL, '<p>The main objective of this process is to free up the memory space occupied by the unnecessary and unreachable objects during the Java program execution by deleting those unreachable objects.</p><ul><li>This ensures that the memory resource is used efficiently, but it provides no guarantee that there would be sufficient memory for the program execution</li></ul>', NULL, NULL, NULL),
	(45, 'Q', NULL, NULL, NULL, NULL, NULL, 1, 0, NULL, NULL, 1, NULL, _binary 0x3125c9fa, NULL, NULL, 0, 0, 0, _binary 0x3125c9fa, 1, 81224600000, 0, '', '2022-11-13 13:13:03', NULL, NULL, 'What is a ClassLoader?', '', 'java', NULL, NULL),
	(46, 'A', 45, NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, 1, NULL, _binary 0x3125c9fa, NULL, NULL, 0, 0, 0, NULL, 0, NULL, 0, 'html', '2022-11-13 13:13:50', NULL, NULL, NULL, '<p>Java Classloader is the program that belongs to JRE (Java Runtime Environment). The task of ClassLoader is to load the required classes and interfaces to the JVM when required.&nbsp;</p><p><strong>Example</strong></p><p>To get input from the console, we require the scanner class. And the Scanner class is loaded by the ClassLoader.</p>', NULL, NULL, NULL),
	(47, 'Q', NULL, NULL, NULL, NULL, NULL, 1, 0, NULL, NULL, 1, NULL, _binary 0x3125c9fa, NULL, NULL, 0, 0, 0, _binary 0x3125c9fa, 1, 81224700000, 0, '', '2022-11-13 13:14:08', NULL, NULL, 'What part of memory - Stack or Heap - is cleaned in garbage collection process?', '', 'java', NULL, NULL),
	(48, 'A', 47, NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, 1, NULL, _binary 0x3125c9fa, NULL, NULL, 0, 0, 0, NULL, 0, NULL, 0, 'html', '2022-11-13 13:14:42', NULL, NULL, NULL, '<p><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial">GC will clean Heap Memory&nbsp;</span></p>', NULL, NULL, NULL),
	(49, 'Q', NULL, NULL, NULL, NULL, NULL, 1, 0, NULL, NULL, 1, NULL, _binary 0x3125c9fa, NULL, NULL, 0, 0, 0, _binary 0x3125c9fa, 1, 81224700000, 0, '', '2022-11-13 13:15:16', NULL, NULL, 'What are shallow copy and deep copy in java?', '', 'java', NULL, NULL),
	(50, 'A', 49, NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, 1, NULL, _binary 0x3125c9fa, 1, _binary 0x3125c9fa, 0, 0, 0, NULL, 0, NULL, 0, 'html', '2022-11-13 13:25:41', '2022-11-13 13:37:40', 'E', NULL, '<p>To copy the object\'s data, we have several methods like deep copy and shallow copy.&nbsp;</p><p><strong>Example:</strong></p><p><span style="font-family:Tahoma,Geneva,sans-serif">class Rectangle{</span></p><p><span style="font-family:Tahoma,Geneva,sans-serif">int length = 5;</span></p><p><span style="font-family:Tahoma,Geneva,sans-serif">int breadth = 3;</span></p><p><span style="font-family:Tahoma,Geneva,sans-serif">}</span></p><p>Object for this Rectangle class - Rectangle obj1 = new Rectangle();</p><p><span style="font-family:Tahoma,Geneva,sans-serif"><strong>Shallow copy</strong> - The shallow copy only creates a new reference and points to the same object.&nbsp;</span></p><p><span style="font-family:Tahoma,Geneva,sans-serif">Example: F</span><span style="font-family:Tahoma,Geneva,sans-serif">or Shallow copy, we can do this by</span></p><pre><span style="font-family:Tahoma,Geneva,sans-serif">Rectangle obj2 = obj1;</span></pre><p><span style="font-family:Tahoma,Geneva,sans-serif">Now by doing this what will happen is the new reference is created with the name obj2 and that will point to the same memory location.</span></p><p><span style="font-family:Tahoma,Geneva,sans-serif"><strong>Deep Copy - </strong>In a deep copy, we create a new object and copy the old object value to the new object.&nbsp;</span></p><p><span style="font-family:Tahoma,Geneva,sans-serif">Example -</span></p><pre><span style="font-family:Tahoma,Geneva,sans-serif">Rectangle obj3 = new Rectangle();\nObj3.length = obj1.length;\nObj3.breadth = obj1.breadth;</span>\n</pre><p><span style="font-family:Tahoma,Geneva,sans-serif">Now, if we change the values in shallow copy then they affect the other reference as well. Let\'s see with the help of an example -</span></p><h3><span style="font-family:Tahoma,Geneva,sans-serif">class Rectangle {</span><br><span style="font-family:Tahoma,Geneva,sans-serif">&nbsp;&nbsp;&nbsp; int length = 5;</span><br><span style="font-family:Tahoma,Geneva,sans-serif">&nbsp;&nbsp;&nbsp; int breadth = 3;</span><br><span style="font-family:Tahoma,Geneva,sans-serif">}</span></h3><pre><span style="font-family:Tahoma,Geneva,sans-serif">public class Main {</span>\n\n    public static void main(String[] args) {\n         Rectangle obj1 = new Rectangle();\n\n         //Shallow Copy\n         Rectangle obj2 = obj1;      \n\n         System.out.println(" Before Changing the value of object 1, the object2 will be - ");\n         System.out.println(" Object2 Length = "+obj2.length+", Object2 Breadth = "+obj2.breadth);\n\n         //Changing the values for object1.\n         obj1.length = 10;\n         obj1.breadth = 20;\n\n<span style="font-family:Tahoma,Geneva,sans-serif">                System.out.println("\\n After Changing the value of object 1, the object2 will be - ");\n                System.out.println(" Object2 Length = "+obj2.length+", Object2 Breadth = "+obj2.breadth);\n     }\n}</span></pre><pre><span style="font-family:Tahoma,Geneva,sans-serif"><strong>Output -</strong>\n</span>\n<span style="font-family:Tahoma,Geneva,sans-serif">Before Changing the value of object 1, the object2 will be -\nObject2 Length = 5, Object2 Breadth = 3\n\nAfter Changing the value of object 1, the object2 will be -\nObject2 Length = 10, Object2 Breadth = 20</span></pre><p><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial">We can see that in the above code, if we change the values of object1, then the object2 values also get changed. It is because of the reference.</span></p><p><span style="color:#373e3f; font-family:-apple-system,system-ui,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Source Sans Pro&quot;,Helvetica,Arial">Now, if we change the code to deep copy, then there will be no effect on object2 if it is of type deep copy. Consider some snippets to be added in the above code.</span></p><pre><span style="font-family:Tahoma,Geneva,sans-serif"><span style="color:#373e3f">class Rectangle {</span>\n <span style="color:#373e3f">   int length = 5;</span>\n <span style="color:#373e3f">   int breadth = 3;</span>\n<span style="color:#373e3f">}</span>\n\n<span style="color:#373e3f">public class Main {</span>\n<span style="color:#373e3f">   public static void main(String[] args) {</span>\n         <span style="color:#373e3f">Rectangle obj1 = new Rectangle();</span>\n         <span style="color:#373e3f">//Shallow Copy</span>\n         <span style="color:#373e3f">Rectangle obj2 = new Rectangle();</span>\n         <span style="color:#373e3f">obj2.length = obj1.length;</span>\n         <span style="color:#373e3f">obj2.breadth = obj1.breadth;</span></span></pre><pre><span style="font-family:Tahoma,Geneva,sans-serif">         <span style="color:#373e3f">System.out.println(" Before Changing the value of object 1, the object2 will be - ");</span>\n<span style="color:#373e3f">         System.out.println(" Object2 Length = "+obj2.length+", Object2 Breadth = "+obj2.breadth);</span>\n         // <span style="color:#373e3f">Changing the values for object1.</span>\n<span style="color:#373e3f">         obj1.length = 10;</span>\n<span style="color:#373e3f">         obj1.breadth = 20;</span>\n\n<span style="color:#373e3f">          System.out.println("\\n After Changing the value of object 1, the object2 will be - ");</span>\n<span style="color:#373e3f">          System.out.println(" Object2 Length = "+obj2.length+", Object2 Breadth = "+obj2.breadth);</span>\n    <span style="color:#373e3f">}</span>\n<span style="color:#373e3f">}</span></span></pre><p><span style="color:#373e3f">The above snippet will not affect the object2 values. It has its separate values. The output will be</span></p><pre><span style="font-family:Tahoma,Geneva,sans-serif"><span style="color:#373e3f">Before Changing the value of object 1, the object2 will be - </span>\n<span style="color:#373e3f">Object2 Length = 5, Object2 Breadth = 3</span>\n\n<span style="color:#373e3f">After Changing the value of object 1, the object2 will be - </span>\n<span style="color:#373e3f">Object2 Length = 5, Object2 Breadth = 3</span></span></pre><p><span style="color:#373e3f; font-family:Tahoma, Geneva, sans-serif">Now we see that we need to write the number of codes for this deep copy. So to reduce this, In java, there is a method called <strong>clone()</strong>.&nbsp;</span></p><p>The <strong>clone()</strong> will do this deep copy internally and return a new object. And to do this we need to write only 1 line of code.&nbsp;</p><p>That is -&nbsp;</p><p><strong>Rectangle obj2 = obj1.clone();</strong></p>', NULL, NULL, NULL);

-- Dumping structure for table fullsm3q_askme.posttags
CREATE TABLE IF NOT EXISTS `posttags` (
  `postid` int(10) unsigned NOT NULL,
  `wordid` int(10) unsigned NOT NULL,
  `postcreated` datetime NOT NULL,
  KEY `postid` (`postid`),
  KEY `wordid` (`wordid`,`postcreated`),
  CONSTRAINT `posttags_ibfk_1` FOREIGN KEY (`postid`) REFERENCES `posts` (`postid`) ON DELETE CASCADE,
  CONSTRAINT `posttags_ibfk_2` FOREIGN KEY (`wordid`) REFERENCES `words` (`wordid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table fullsm3q_askme.posttags: ~20 rows (approximately)
DELETE FROM `posttags`;
INSERT INTO `posttags` (`postid`, `wordid`, `postcreated`) VALUES
	(1, 3, '2022-11-12 12:29:19'),
	(1, 49, '2022-11-12 12:29:19'),
	(5, 3, '2022-11-12 12:37:49'),
	(5, 49, '2022-11-12 12:37:49'),
	(3, 3, '2022-11-12 12:35:22'),
	(3, 49, '2022-11-12 12:35:22'),
	(7, 3, '2022-11-12 12:52:25'),
	(9, 3, '2022-11-12 12:56:15'),
	(11, 3, '2022-11-12 12:58:05'),
	(13, 3, '2022-11-12 13:09:45'),
	(15, 3, '2022-11-13 08:07:42'),
	(17, 3, '2022-11-13 08:30:38'),
	(19, 3, '2022-11-13 08:41:39'),
	(21, 3, '2022-11-13 08:45:45'),
	(23, 3, '2022-11-13 08:51:47'),
	(25, 3, '2022-11-13 08:57:37'),
	(27, 3, '2022-11-13 10:35:50'),
	(29, 3, '2022-11-13 12:09:57'),
	(31, 3, '2022-11-13 12:26:29'),
	(33, 3, '2022-11-13 12:43:06'),
	(35, 3, '2022-11-13 12:48:09'),
	(37, 3, '2022-11-13 12:56:53'),
	(39, 3, '2022-11-13 12:58:20'),
	(41, 3, '2022-11-13 13:08:44'),
	(43, 3, '2022-11-13 13:10:49'),
	(45, 3, '2022-11-13 13:13:03'),
	(47, 3, '2022-11-13 13:14:08'),
	(49, 3, '2022-11-13 13:15:16');

-- Dumping structure for table fullsm3q_askme.sharedevents
CREATE TABLE IF NOT EXISTS `sharedevents` (
  `entitytype` char(1) CHARACTER SET ascii NOT NULL,
  `entityid` int(10) unsigned NOT NULL,
  `questionid` int(10) unsigned NOT NULL,
  `lastpostid` int(10) unsigned NOT NULL,
  `updatetype` char(1) CHARACTER SET ascii DEFAULT NULL,
  `lastuserid` int(10) unsigned DEFAULT NULL,
  `updated` datetime NOT NULL,
  KEY `entitytype` (`entitytype`,`entityid`,`updated`),
  KEY `questionid` (`questionid`,`entitytype`,`entityid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table fullsm3q_askme.sharedevents: ~127 rows (approximately)
DELETE FROM `sharedevents`;
INSERT INTO `sharedevents` (`entitytype`, `entityid`, `questionid`, `lastpostid`, `updatetype`, `lastuserid`, `updated`) VALUES
	('Q', 1, 1, 1, NULL, 1, '2022-11-12 12:29:19'),
	('T', 49, 1, 1, NULL, 1, '2022-11-12 12:29:19'),
	('T', 3, 1, 1, NULL, 1, '2022-11-12 12:29:19'),
	('Q', 1, 1, 1, 'E', 1, '2022-11-12 12:29:55'),
	('Q', 1, 1, 2, NULL, 1, '2022-11-12 12:30:02'),
	('Q', 1, 1, 2, 'S', 1, '2022-11-12 12:33:47'),
	('Q', 1, 1, 1, 'C', 1, '2022-11-12 12:33:47'),
	('Q', 3, 3, 3, NULL, 1, '2022-11-12 12:35:22'),
	('Q', 3, 3, 4, NULL, 1, '2022-11-12 12:35:33'),
	('Q', 5, 5, 5, NULL, 1, '2022-11-12 12:37:49'),
	('T', 49, 5, 5, NULL, 1, '2022-11-12 12:37:49'),
	('T', 3, 5, 5, NULL, 1, '2022-11-12 12:37:49'),
	('Q', 3, 3, 3, 'T', 1, '2022-11-12 12:38:27'),
	('T', 49, 3, 3, 'T', 1, '2022-11-12 12:38:27'),
	('T', 3, 3, 3, 'T', 1, '2022-11-12 12:38:27'),
	('Q', 5, 5, 6, NULL, 1, '2022-11-12 12:41:15'),
	('Q', 5, 5, 6, 'E', 1, '2022-11-12 12:44:27'),
	('Q', 7, 7, 7, NULL, 1, '2022-11-12 12:52:25'),
	('T', 3, 7, 7, NULL, 1, '2022-11-12 12:52:25'),
	('Q', 7, 7, 8, NULL, 1, '2022-11-12 12:52:49'),
	('Q', 9, 9, 9, NULL, 1, '2022-11-12 12:56:15'),
	('T', 3, 9, 9, NULL, 1, '2022-11-12 12:56:15'),
	('Q', 9, 9, 10, NULL, 1, '2022-11-12 12:57:01'),
	('Q', 11, 11, 11, NULL, 1, '2022-11-12 12:58:06'),
	('T', 3, 11, 11, NULL, 1, '2022-11-12 12:58:06'),
	('Q', 11, 11, 12, NULL, 1, '2022-11-12 12:58:25'),
	('T', 3, 13, 13, NULL, 1, '2022-11-12 13:09:45'),
	('Q', 13, 13, 14, NULL, 1, '2022-11-12 13:14:05'),
	('Q', 13, 13, 14, 'E', 1, '2022-11-12 13:15:08'),
	('Q', 13, 13, 14, 'E', 1, '2022-11-12 13:17:30'),
	('Q', 13, 13, 14, 'E', 1, '2022-11-12 18:04:09'),
	('Q', 13, 13, 14, 'E', 1, '2022-11-12 18:04:42'),
	('Q', 15, 15, 15, NULL, 1, '2022-11-13 08:07:42'),
	('T', 3, 15, 15, NULL, 1, '2022-11-13 08:07:42'),
	('Q', 15, 15, 16, NULL, 1, '2022-11-13 08:08:23'),
	('Q', 15, 15, 16, 'E', 1, '2022-11-13 08:09:30'),
	('Q', 17, 17, 17, NULL, 1, '2022-11-13 08:30:38'),
	('T', 3, 17, 17, NULL, 1, '2022-11-13 08:30:38'),
	('Q', 17, 17, 18, NULL, 1, '2022-11-13 08:38:38'),
	('Q', 17, 17, 18, 'E', 1, '2022-11-13 08:39:01'),
	('Q', 19, 19, 19, NULL, 1, '2022-11-13 08:41:39'),
	('T', 3, 19, 19, NULL, 1, '2022-11-13 08:41:39'),
	('Q', 19, 19, 20, NULL, 1, '2022-11-13 08:43:36'),
	('Q', 19, 19, 20, 'E', 1, '2022-11-13 08:44:58'),
	('T', 3, 21, 21, NULL, 1, '2022-11-13 08:45:45'),
	('Q', 21, 21, 22, NULL, 1, '2022-11-13 08:45:55'),
	('Q', 21, 21, 22, 'E', 1, '2022-11-13 08:50:12'),
	('Q', 21, 21, 22, 'E', 1, '2022-11-13 08:50:35'),
	('Q', 21, 21, 22, 'E', 1, '2022-11-13 08:50:43'),
	('Q', 21, 21, 22, 'E', 1, '2022-11-13 08:50:59'),
	('T', 3, 23, 23, NULL, 1, '2022-11-13 08:51:47'),
	('Q', 23, 23, 24, 'E', 1, '2022-11-13 08:53:24'),
	('Q', 23, 23, 24, 'E', 1, '2022-11-13 08:54:34'),
	('Q', 23, 23, 24, 'E', 1, '2022-11-13 08:55:33'),
	('Q', 23, 23, 24, 'E', 1, '2022-11-13 08:56:28'),
	('Q', 23, 23, 24, 'E', 1, '2022-11-13 08:56:42'),
	('T', 3, 25, 25, NULL, 1, '2022-11-13 08:57:37'),
	('Q', 25, 25, 26, NULL, 1, '2022-11-13 08:58:48'),
	('U', 1, 25, 26, NULL, 1, '2022-11-13 08:58:48'),
	('Q', 25, 25, 26, 'E', 1, '2022-11-13 09:01:57'),
	('U', 1, 25, 26, 'E', 1, '2022-11-13 09:01:57'),
	('Q', 25, 25, 26, 'E', 1, '2022-11-13 09:02:11'),
	('U', 1, 25, 26, 'E', 1, '2022-11-13 09:02:11'),
	('Q', 25, 25, 26, 'E', 1, '2022-11-13 09:02:32'),
	('U', 1, 25, 26, 'E', 1, '2022-11-13 09:02:32'),
	('Q', 25, 25, 26, 'E', 1, '2022-11-13 09:02:46'),
	('U', 1, 25, 26, 'E', 1, '2022-11-13 09:02:46'),
	('Q', 27, 27, 27, NULL, 1, '2022-11-13 10:35:50'),
	('U', 1, 27, 27, NULL, 1, '2022-11-13 10:35:50'),
	('T', 3, 27, 27, NULL, 1, '2022-11-13 10:35:50'),
	('Q', 27, 27, 28, NULL, 1, '2022-11-13 10:36:48'),
	('U', 1, 27, 28, NULL, 1, '2022-11-13 10:36:48'),
	('U', 1, 29, 29, NULL, 1, '2022-11-13 12:09:57'),
	('T', 3, 29, 29, NULL, 1, '2022-11-13 12:09:57'),
	('Q', 29, 29, 30, NULL, 1, '2022-11-13 12:23:58'),
	('U', 1, 29, 30, NULL, 1, '2022-11-13 12:23:58'),
	('Q', 29, 29, 30, 'E', 1, '2022-11-13 12:24:27'),
	('U', 1, 29, 30, 'E', 1, '2022-11-13 12:24:27'),
	('Q', 29, 29, 30, 'E', 1, '2022-11-13 12:24:48'),
	('U', 1, 29, 30, 'E', 1, '2022-11-13 12:24:48'),
	('Q', 29, 29, 30, 'E', 1, '2022-11-13 12:25:21'),
	('U', 1, 29, 30, 'E', 1, '2022-11-13 12:25:21'),
	('Q', 29, 29, 30, 'E', 1, '2022-11-13 12:25:41'),
	('U', 1, 29, 30, 'E', 1, '2022-11-13 12:25:41'),
	('U', 1, 31, 31, NULL, 1, '2022-11-13 12:26:29'),
	('T', 3, 31, 31, NULL, 1, '2022-11-13 12:26:29'),
	('Q', 31, 31, 32, NULL, 1, '2022-11-13 12:27:13'),
	('U', 1, 31, 32, NULL, 1, '2022-11-13 12:27:13'),
	('Q', 31, 31, 32, 'E', 1, '2022-11-13 12:27:18'),
	('U', 1, 31, 32, 'E', 1, '2022-11-13 12:27:18'),
	('Q', 31, 31, 32, 'E', 1, '2022-11-13 12:27:32'),
	('U', 1, 31, 32, 'E', 1, '2022-11-13 12:27:32'),
	('Q', 31, 31, 32, 'E', 1, '2022-11-13 12:28:03'),
	('U', 1, 31, 32, 'E', 1, '2022-11-13 12:28:03'),
	('Q', 31, 31, 32, 'E', 1, '2022-11-13 12:28:12'),
	('U', 1, 31, 32, 'E', 1, '2022-11-13 12:28:12'),
	('Q', 33, 33, 33, NULL, 1, '2022-11-13 12:43:06'),
	('U', 1, 33, 33, NULL, 1, '2022-11-13 12:43:06'),
	('T', 3, 33, 33, NULL, 1, '2022-11-13 12:43:06'),
	('Q', 33, 33, 33, 'E', 1, '2022-11-13 12:45:41'),
	('U', 1, 33, 33, 'E', 1, '2022-11-13 12:45:41'),
	('Q', 33, 33, 34, NULL, 1, '2022-11-13 12:46:23'),
	('U', 1, 33, 34, NULL, 1, '2022-11-13 12:46:23'),
	('Q', 35, 35, 35, NULL, 1, '2022-11-13 12:48:09'),
	('U', 1, 35, 35, NULL, 1, '2022-11-13 12:48:09'),
	('T', 3, 35, 35, NULL, 1, '2022-11-13 12:48:09'),
	('Q', 35, 35, 36, NULL, 1, '2022-11-13 12:55:07'),
	('U', 1, 35, 36, NULL, 1, '2022-11-13 12:55:07'),
	('Q', 35, 35, 36, 'E', 1, '2022-11-13 12:56:25'),
	('U', 1, 35, 36, 'E', 1, '2022-11-13 12:56:25'),
	('Q', 37, 37, 37, NULL, 1, '2022-11-13 12:56:53'),
	('U', 1, 37, 37, NULL, 1, '2022-11-13 12:56:53'),
	('T', 3, 37, 37, NULL, 1, '2022-11-13 12:56:53'),
	('Q', 37, 37, 38, NULL, 1, '2022-11-13 12:57:02'),
	('U', 1, 37, 38, NULL, 1, '2022-11-13 12:57:02'),
	('Q', 39, 39, 39, NULL, 1, '2022-11-13 12:58:20'),
	('U', 1, 39, 39, NULL, 1, '2022-11-13 12:58:20'),
	('T', 3, 39, 39, NULL, 1, '2022-11-13 12:58:20'),
	('Q', 39, 39, 40, NULL, 1, '2022-11-13 12:58:48'),
	('U', 1, 39, 40, NULL, 1, '2022-11-13 12:58:48'),
	('Q', 39, 39, 40, 'E', 1, '2022-11-13 12:59:02'),
	('U', 1, 39, 40, 'E', 1, '2022-11-13 12:59:02'),
	('Q', 39, 39, 40, 'E', 1, '2022-11-13 13:06:43'),
	('U', 1, 39, 40, 'E', 1, '2022-11-13 13:06:43'),
	('Q', 41, 41, 41, NULL, 1, '2022-11-13 13:08:44'),
	('U', 1, 41, 41, NULL, 1, '2022-11-13 13:08:44'),
	('T', 3, 41, 41, NULL, 1, '2022-11-13 13:08:44'),
	('Q', 41, 41, 42, NULL, 1, '2022-11-13 13:09:25'),
	('U', 1, 41, 42, NULL, 1, '2022-11-13 13:09:25'),
	('Q', 41, 41, 42, 'E', 1, '2022-11-13 13:10:35'),
	('U', 1, 41, 42, 'E', 1, '2022-11-13 13:10:35'),
	('Q', 43, 43, 43, NULL, 1, '2022-11-13 13:10:49'),
	('U', 1, 43, 43, NULL, 1, '2022-11-13 13:10:49'),
	('T', 3, 43, 43, NULL, 1, '2022-11-13 13:10:49'),
	('Q', 43, 43, 44, NULL, 1, '2022-11-13 13:11:17'),
	('U', 1, 43, 44, NULL, 1, '2022-11-13 13:11:17'),
	('Q', 45, 45, 45, NULL, 1, '2022-11-13 13:13:03'),
	('U', 1, 45, 45, NULL, 1, '2022-11-13 13:13:03'),
	('T', 3, 45, 45, NULL, 1, '2022-11-13 13:13:03'),
	('Q', 45, 45, 46, NULL, 1, '2022-11-13 13:13:50'),
	('U', 1, 45, 46, NULL, 1, '2022-11-13 13:13:50'),
	('Q', 47, 47, 47, NULL, 1, '2022-11-13 13:14:08'),
	('U', 1, 47, 47, NULL, 1, '2022-11-13 13:14:08'),
	('T', 3, 47, 47, NULL, 1, '2022-11-13 13:14:08'),
	('Q', 47, 47, 48, NULL, 1, '2022-11-13 13:14:42'),
	('U', 1, 47, 48, NULL, 1, '2022-11-13 13:14:42'),
	('U', 1, 49, 49, NULL, 1, '2022-11-13 13:15:16'),
	('T', 3, 49, 49, NULL, 1, '2022-11-13 13:15:16'),
	('U', 1, 49, 50, NULL, 1, '2022-11-13 13:25:41'),
	('U', 1, 49, 50, 'E', 1, '2022-11-13 13:26:40'),
	('U', 1, 49, 50, 'E', 1, '2022-11-13 13:26:53'),
	('U', 1, 49, 50, 'E', 1, '2022-11-13 13:32:59'),
	('Q', 49, 49, 50, 'E', 1, '2022-11-13 13:34:11'),
	('U', 1, 49, 50, 'E', 1, '2022-11-13 13:34:11'),
	('Q', 49, 49, 50, 'E', 1, '2022-11-13 13:34:32'),
	('U', 1, 49, 50, 'E', 1, '2022-11-13 13:34:32'),
	('Q', 49, 49, 50, 'E', 1, '2022-11-13 13:35:06'),
	('U', 1, 49, 50, 'E', 1, '2022-11-13 13:35:06'),
	('Q', 49, 49, 50, 'E', 1, '2022-11-13 13:36:37'),
	('U', 1, 49, 50, 'E', 1, '2022-11-13 13:36:37'),
	('Q', 49, 49, 50, 'E', 1, '2022-11-13 13:37:40'),
	('U', 1, 49, 50, 'E', 1, '2022-11-13 13:37:40');

-- Dumping structure for table fullsm3q_askme.tagmetas
CREATE TABLE IF NOT EXISTS `tagmetas` (
  `tag` varchar(80) NOT NULL,
  `title` varchar(40) NOT NULL,
  `content` varchar(8000) NOT NULL,
  PRIMARY KEY (`tag`,`title`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table fullsm3q_askme.tagmetas: ~0 rows (approximately)
DELETE FROM `tagmetas`;

-- Dumping structure for table fullsm3q_askme.tagwords
CREATE TABLE IF NOT EXISTS `tagwords` (
  `postid` int(10) unsigned NOT NULL,
  `wordid` int(10) unsigned NOT NULL,
  KEY `postid` (`postid`),
  KEY `wordid` (`wordid`),
  CONSTRAINT `tagwords_ibfk_1` FOREIGN KEY (`postid`) REFERENCES `posts` (`postid`) ON DELETE CASCADE,
  CONSTRAINT `tagwords_ibfk_2` FOREIGN KEY (`wordid`) REFERENCES `words` (`wordid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table fullsm3q_askme.tagwords: ~20 rows (approximately)
DELETE FROM `tagwords`;
INSERT INTO `tagwords` (`postid`, `wordid`) VALUES
	(1, 3),
	(1, 49),
	(5, 3),
	(5, 49),
	(3, 3),
	(3, 49),
	(7, 3),
	(9, 3),
	(11, 3),
	(13, 3),
	(15, 3),
	(17, 3),
	(19, 3),
	(21, 3),
	(23, 3),
	(25, 3),
	(27, 3),
	(29, 3),
	(31, 3),
	(33, 3),
	(35, 3),
	(37, 3),
	(39, 3),
	(41, 3),
	(43, 3),
	(45, 3),
	(47, 3),
	(49, 3);

-- Dumping structure for table fullsm3q_askme.titlewords
CREATE TABLE IF NOT EXISTS `titlewords` (
  `postid` int(10) unsigned NOT NULL,
  `wordid` int(10) unsigned NOT NULL,
  KEY `postid` (`postid`),
  KEY `wordid` (`wordid`),
  CONSTRAINT `titlewords_ibfk_1` FOREIGN KEY (`postid`) REFERENCES `posts` (`postid`) ON DELETE CASCADE,
  CONSTRAINT `titlewords_ibfk_2` FOREIGN KEY (`wordid`) REFERENCES `words` (`wordid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table fullsm3q_askme.titlewords: ~169 rows (approximately)
DELETE FROM `titlewords`;
INSERT INTO `titlewords` (`postid`, `wordid`) VALUES
	(1, 1),
	(1, 2),
	(1, 3),
	(1, 4),
	(1, 5),
	(1, 6),
	(1, 7),
	(5, 65),
	(5, 66),
	(5, 67),
	(5, 30),
	(5, 68),
	(5, 69),
	(5, 10),
	(5, 3),
	(5, 70),
	(5, 71),
	(5, 72),
	(3, 1),
	(3, 2),
	(3, 3),
	(3, 16),
	(3, 4),
	(3, 50),
	(3, 51),
	(3, 52),
	(3, 7),
	(7, 35),
	(7, 3),
	(7, 36),
	(7, 129),
	(7, 24),
	(7, 25),
	(7, 130),
	(7, 51),
	(7, 52),
	(7, 131),
	(7, 7),
	(9, 70),
	(9, 2),
	(9, 3),
	(9, 153),
	(9, 104),
	(9, 154),
	(11, 162),
	(11, 99),
	(11, 176),
	(11, 10),
	(11, 154),
	(11, 1),
	(11, 15),
	(11, 3),
	(11, 16),
	(11, 177),
	(11, 87),
	(11, 74),
	(13, 213),
	(13, 214),
	(13, 215),
	(13, 216),
	(13, 88),
	(13, 157),
	(13, 217),
	(13, 218),
	(13, 30),
	(13, 4),
	(13, 219),
	(15, 213),
	(15, 99),
	(15, 25),
	(15, 255),
	(15, 256),
	(15, 76),
	(15, 24),
	(15, 96),
	(15, 30),
	(15, 236),
	(15, 10),
	(15, 3),
	(17, 35),
	(17, 215),
	(17, 278),
	(17, 25),
	(17, 65),
	(17, 66),
	(17, 279),
	(17, 120),
	(17, 30),
	(17, 280),
	(17, 281),
	(17, 10),
	(17, 3),
	(19, 70),
	(19, 2),
	(19, 157),
	(19, 346),
	(19, 347),
	(19, 123),
	(19, 10),
	(19, 3),
	(21, 359),
	(21, 360),
	(21, 25),
	(21, 167),
	(21, 74),
	(21, 247),
	(21, 361),
	(23, 35),
	(23, 25),
	(23, 106),
	(23, 120),
	(23, 36),
	(23, 382),
	(25, 396),
	(25, 18),
	(25, 120),
	(25, 361),
	(25, 30),
	(25, 397),
	(25, 88),
	(25, 398),
	(25, 399),
	(25, 354),
	(27, 360),
	(27, 25),
	(27, 87),
	(27, 74),
	(27, 444),
	(27, 445),
	(27, 10),
	(27, 218),
	(27, 120),
	(27, 30),
	(27, 105),
	(29, 214),
	(29, 444),
	(29, 461),
	(29, 30),
	(29, 462),
	(29, 463),
	(29, 44),
	(29, 25),
	(29, 321),
	(29, 246),
	(31, 2),
	(31, 14),
	(31, 384),
	(31, 13),
	(31, 25),
	(31, 461),
	(31, 245),
	(31, 85),
	(31, 16),
	(31, 36),
	(31, 476),
	(31, 133),
	(31, 383),
	(31, 31),
	(31, 494),
	(31, 293),
	(33, 501),
	(33, 25),
	(33, 502),
	(33, 74),
	(33, 3),
	(33, 79),
	(33, 30),
	(33, 503),
	(33, 504),
	(35, 89),
	(35, 35),
	(35, 215),
	(35, 87),
	(35, 512),
	(35, 445),
	(37, 35),
	(37, 25),
	(37, 115),
	(37, 97),
	(37, 36),
	(37, 382),
	(39, 35),
	(39, 25),
	(39, 115),
	(39, 97),
	(39, 36),
	(39, 449),
	(41, 65),
	(41, 66),
	(41, 115),
	(41, 97),
	(41, 96),
	(41, 30),
	(41, 137),
	(41, 10),
	(41, 3),
	(43, 213),
	(43, 2),
	(43, 25),
	(43, 106),
	(43, 565),
	(43, 74),
	(43, 204),
	(43, 205),
	(45, 213),
	(45, 2),
	(45, 4),
	(45, 578),
	(47, 213),
	(47, 586),
	(47, 74),
	(47, 69),
	(47, 68),
	(47, 21),
	(47, 67),
	(47, 2),
	(47, 587),
	(47, 10),
	(47, 204),
	(47, 205),
	(47, 362),
	(49, 213),
	(49, 99),
	(49, 588),
	(49, 232),
	(49, 30),
	(49, 589),
	(49, 10),
	(49, 3);

-- Dumping structure for table fullsm3q_askme.userevents
CREATE TABLE IF NOT EXISTS `userevents` (
  `userid` int(10) unsigned NOT NULL,
  `entitytype` char(1) CHARACTER SET ascii NOT NULL,
  `entityid` int(10) unsigned NOT NULL,
  `questionid` int(10) unsigned NOT NULL,
  `lastpostid` int(10) unsigned NOT NULL,
  `updatetype` char(1) CHARACTER SET ascii DEFAULT NULL,
  `lastuserid` int(10) unsigned DEFAULT NULL,
  `updated` datetime NOT NULL,
  KEY `userid` (`userid`,`updated`),
  KEY `questionid` (`questionid`,`userid`),
  CONSTRAINT `userevents_ibfk_1` FOREIGN KEY (`userid`) REFERENCES `users` (`userid`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table fullsm3q_askme.userevents: ~0 rows (approximately)
DELETE FROM `userevents`;

-- Dumping structure for table fullsm3q_askme.userfavorites
CREATE TABLE IF NOT EXISTS `userfavorites` (
  `userid` int(10) unsigned NOT NULL,
  `entitytype` char(1) CHARACTER SET ascii NOT NULL,
  `entityid` int(10) unsigned NOT NULL,
  `nouserevents` tinyint(3) unsigned NOT NULL,
  PRIMARY KEY (`userid`,`entitytype`,`entityid`),
  KEY `userid` (`userid`,`nouserevents`),
  KEY `entitytype` (`entitytype`,`entityid`,`nouserevents`),
  CONSTRAINT `userfavorites_ibfk_1` FOREIGN KEY (`userid`) REFERENCES `users` (`userid`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table fullsm3q_askme.userfavorites: ~0 rows (approximately)
DELETE FROM `userfavorites`;

-- Dumping structure for table fullsm3q_askme.userfields
CREATE TABLE IF NOT EXISTS `userfields` (
  `fieldid` smallint(5) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(40) NOT NULL,
  `content` varchar(40) DEFAULT NULL,
  `position` smallint(5) unsigned NOT NULL,
  `flags` tinyint(3) unsigned NOT NULL,
  `permit` tinyint(3) unsigned DEFAULT NULL,
  PRIMARY KEY (`fieldid`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

-- Dumping data for table fullsm3q_askme.userfields: ~4 rows (approximately)
DELETE FROM `userfields`;
INSERT INTO `userfields` (`fieldid`, `title`, `content`, `position`, `flags`, `permit`) VALUES
	(1, 'name', NULL, 1, 0, 150),
	(2, 'location', NULL, 2, 0, 150),
	(3, 'website', NULL, 3, 2, 150),
	(4, 'about', NULL, 4, 1, 150);

-- Dumping structure for table fullsm3q_askme.userlevels
CREATE TABLE IF NOT EXISTS `userlevels` (
  `userid` int(10) unsigned NOT NULL,
  `entitytype` char(1) CHARACTER SET ascii NOT NULL,
  `entityid` int(10) unsigned NOT NULL,
  `level` tinyint(3) unsigned DEFAULT NULL,
  UNIQUE KEY `userid` (`userid`,`entitytype`,`entityid`),
  KEY `entitytype` (`entitytype`,`entityid`),
  CONSTRAINT `userlevels_ibfk_1` FOREIGN KEY (`userid`) REFERENCES `users` (`userid`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table fullsm3q_askme.userlevels: ~0 rows (approximately)
DELETE FROM `userlevels`;

-- Dumping structure for table fullsm3q_askme.userlimits
CREATE TABLE IF NOT EXISTS `userlimits` (
  `userid` int(10) unsigned NOT NULL,
  `action` char(1) CHARACTER SET ascii NOT NULL,
  `period` int(10) unsigned NOT NULL,
  `count` smallint(5) unsigned NOT NULL,
  UNIQUE KEY `userid` (`userid`,`action`),
  CONSTRAINT `userlimits_ibfk_1` FOREIGN KEY (`userid`) REFERENCES `users` (`userid`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table fullsm3q_askme.userlimits: ~2 rows (approximately)
DELETE FROM `userlimits`;
INSERT INTO `userlimits` (`userid`, `action`, `period`, `count`) VALUES
	(1, 'A', 463429, 5),
	(1, 'Q', 463429, 5);

-- Dumping structure for table fullsm3q_askme.userlogins
CREATE TABLE IF NOT EXISTS `userlogins` (
  `userid` int(10) unsigned NOT NULL,
  `source` varchar(16) CHARACTER SET ascii NOT NULL,
  `identifier` varbinary(1024) NOT NULL,
  `identifiermd5` binary(16) NOT NULL,
  KEY `source` (`source`,`identifiermd5`),
  KEY `userid` (`userid`),
  CONSTRAINT `userlogins_ibfk_1` FOREIGN KEY (`userid`) REFERENCES `users` (`userid`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table fullsm3q_askme.userlogins: ~0 rows (approximately)
DELETE FROM `userlogins`;

-- Dumping structure for table fullsm3q_askme.usermetas
CREATE TABLE IF NOT EXISTS `usermetas` (
  `userid` int(10) unsigned NOT NULL,
  `title` varchar(40) NOT NULL,
  `content` varchar(8000) NOT NULL,
  PRIMARY KEY (`userid`,`title`),
  CONSTRAINT `usermetas_ibfk_1` FOREIGN KEY (`userid`) REFERENCES `users` (`userid`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table fullsm3q_askme.usermetas: ~0 rows (approximately)
DELETE FROM `usermetas`;

-- Dumping structure for table fullsm3q_askme.usernotices
CREATE TABLE IF NOT EXISTS `usernotices` (
  `noticeid` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `userid` int(10) unsigned NOT NULL,
  `content` varchar(12000) NOT NULL,
  `format` varchar(20) CHARACTER SET ascii NOT NULL,
  `tags` varchar(200) DEFAULT NULL,
  `created` datetime NOT NULL,
  PRIMARY KEY (`noticeid`),
  KEY `userid` (`userid`,`created`),
  CONSTRAINT `usernotices_ibfk_1` FOREIGN KEY (`userid`) REFERENCES `users` (`userid`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table fullsm3q_askme.usernotices: ~0 rows (approximately)
DELETE FROM `usernotices`;

-- Dumping structure for table fullsm3q_askme.userpoints
CREATE TABLE IF NOT EXISTS `userpoints` (
  `userid` int(10) unsigned NOT NULL,
  `points` int(11) NOT NULL DEFAULT '0',
  `qposts` mediumint(9) NOT NULL DEFAULT '0',
  `aposts` mediumint(9) NOT NULL DEFAULT '0',
  `cposts` mediumint(9) NOT NULL DEFAULT '0',
  `aselects` mediumint(9) NOT NULL DEFAULT '0',
  `aselecteds` mediumint(9) NOT NULL DEFAULT '0',
  `qupvotes` mediumint(9) NOT NULL DEFAULT '0',
  `qdownvotes` mediumint(9) NOT NULL DEFAULT '0',
  `aupvotes` mediumint(9) NOT NULL DEFAULT '0',
  `adownvotes` mediumint(9) NOT NULL DEFAULT '0',
  `cupvotes` mediumint(9) NOT NULL DEFAULT '0',
  `cdownvotes` mediumint(9) NOT NULL DEFAULT '0',
  `qvoteds` int(11) NOT NULL DEFAULT '0',
  `avoteds` int(11) NOT NULL DEFAULT '0',
  `cvoteds` int(11) NOT NULL DEFAULT '0',
  `upvoteds` int(11) NOT NULL DEFAULT '0',
  `downvoteds` int(11) NOT NULL DEFAULT '0',
  `bonus` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`userid`),
  KEY `points` (`points`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table fullsm3q_askme.userpoints: ~1 rows (approximately)
DELETE FROM `userpoints`;
INSERT INTO `userpoints` (`userid`, `points`, `qposts`, `aposts`, `cposts`, `aselects`, `aselecteds`, `qupvotes`, `qdownvotes`, `aupvotes`, `adownvotes`, `cupvotes`, `cdownvotes`, `qvoteds`, `avoteds`, `cvoteds`, `upvoteds`, `downvoteds`, `bonus`) VALUES
	(1, 1630, 25, 25, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

-- Dumping structure for table fullsm3q_askme.userprofile
CREATE TABLE IF NOT EXISTS `userprofile` (
  `userid` int(10) unsigned NOT NULL,
  `title` varchar(40) NOT NULL,
  `content` varchar(8000) NOT NULL,
  UNIQUE KEY `userid` (`userid`,`title`),
  CONSTRAINT `userprofile_ibfk_1` FOREIGN KEY (`userid`) REFERENCES `users` (`userid`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table fullsm3q_askme.userprofile: ~0 rows (approximately)
DELETE FROM `userprofile`;

-- Dumping structure for table fullsm3q_askme.users
CREATE TABLE IF NOT EXISTS `users` (
  `userid` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `created` datetime NOT NULL,
  `createip` varbinary(16) NOT NULL,
  `email` varchar(80) NOT NULL,
  `handle` varchar(20) NOT NULL,
  `avatarblobid` bigint(20) unsigned DEFAULT NULL,
  `avatarwidth` smallint(5) unsigned DEFAULT NULL,
  `avatarheight` smallint(5) unsigned DEFAULT NULL,
  `passsalt` binary(16) DEFAULT NULL,
  `passcheck` binary(20) DEFAULT NULL,
  `passhash` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `level` tinyint(3) unsigned NOT NULL,
  `loggedin` datetime NOT NULL,
  `loginip` varbinary(16) NOT NULL,
  `written` datetime DEFAULT NULL,
  `writeip` varbinary(16) DEFAULT NULL,
  `emailcode` char(8) CHARACTER SET ascii NOT NULL DEFAULT '',
  `sessioncode` char(8) CHARACTER SET ascii NOT NULL DEFAULT '',
  `sessionsource` varchar(16) CHARACTER SET ascii DEFAULT '',
  `flags` smallint(5) unsigned NOT NULL DEFAULT '0',
  `wallposts` mediumint(9) NOT NULL DEFAULT '0',
  PRIMARY KEY (`userid`),
  KEY `email` (`email`),
  KEY `handle` (`handle`),
  KEY `level` (`level`),
  KEY `created` (`created`,`level`,`flags`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

-- Dumping data for table fullsm3q_askme.users: ~0 rows (approximately)
DELETE FROM `users`;
INSERT INTO `users` (`userid`, `created`, `createip`, `email`, `handle`, `avatarblobid`, `avatarwidth`, `avatarheight`, `passsalt`, `passcheck`, `passhash`, `level`, `loggedin`, `loginip`, `written`, `writeip`, `emailcode`, `sessioncode`, `sessionsource`, `flags`, `wallposts`) VALUES
	(1, '2022-11-12 12:17:17', _binary 0x3125ca72, 'admin@admin.com', 'admin', NULL, NULL, NULL, NULL, NULL, '$2y$10$pvr/DpOVhFX3.1z8l3noTuoI/dkX.AfAqcy0sY/xAOGd/iC2CEJQO', 120, '2022-11-13 08:04:54', _binary 0x3125c9fa, '2022-11-13 13:37:40', _binary 0x3125c9fa, '', 'eob8xiiq', NULL, 0, 0);

-- Dumping structure for table fullsm3q_askme.uservotes
CREATE TABLE IF NOT EXISTS `uservotes` (
  `postid` int(10) unsigned NOT NULL,
  `userid` int(10) unsigned NOT NULL,
  `vote` tinyint(4) NOT NULL,
  `flag` tinyint(4) NOT NULL,
  `votecreated` datetime DEFAULT NULL,
  `voteupdated` datetime DEFAULT NULL,
  UNIQUE KEY `userid` (`userid`,`postid`),
  KEY `postid` (`postid`),
  KEY `voted` (`votecreated`,`voteupdated`),
  CONSTRAINT `uservotes_ibfk_1` FOREIGN KEY (`postid`) REFERENCES `posts` (`postid`) ON DELETE CASCADE,
  CONSTRAINT `uservotes_ibfk_2` FOREIGN KEY (`userid`) REFERENCES `users` (`userid`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table fullsm3q_askme.uservotes: ~0 rows (approximately)
DELETE FROM `uservotes`;

-- Dumping structure for table fullsm3q_askme.widgets
CREATE TABLE IF NOT EXISTS `widgets` (
  `widgetid` smallint(5) unsigned NOT NULL AUTO_INCREMENT,
  `place` char(2) CHARACTER SET ascii NOT NULL,
  `position` smallint(5) unsigned NOT NULL,
  `tags` varchar(800) CHARACTER SET ascii NOT NULL,
  `title` varchar(80) NOT NULL,
  PRIMARY KEY (`widgetid`),
  UNIQUE KEY `position` (`position`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table fullsm3q_askme.widgets: ~0 rows (approximately)
DELETE FROM `widgets`;

-- Dumping structure for table fullsm3q_askme.words
CREATE TABLE IF NOT EXISTS `words` (
  `wordid` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `word` varchar(80) NOT NULL,
  `titlecount` int(10) unsigned NOT NULL DEFAULT '0',
  `contentcount` int(10) unsigned NOT NULL DEFAULT '0',
  `tagwordcount` int(10) unsigned NOT NULL DEFAULT '0',
  `tagcount` int(10) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`wordid`),
  KEY `word` (`word`),
  KEY `tagcount` (`tagcount`)
) ENGINE=InnoDB AUTO_INCREMENT=615 DEFAULT CHARSET=utf8;

-- Dumping data for table fullsm3q_askme.words: ~347 rows (approximately)
DELETE FROM `words`;
INSERT INTO `words` (`wordid`, `word`, `titlecount`, `contentcount`, `tagwordcount`, `tagcount`) VALUES
	(1, 'why', 3, 0, 0, 0),
	(2, 'is', 8, 22, 0, 0),
	(3, 'java', 12, 14, 25, 25),
	(4, 'a', 4, 19, 0, 0),
	(5, 'platform', 1, 1, 0, 0),
	(6, 'independent', 1, 2, 0, 0),
	(7, 'language', 3, 3, 0, 0),
	(8, 'as', 0, 8, 0, 0),
	(9, 'developed', 0, 1, 0, 0),
	(10, 'in', 9, 17, 0, 0),
	(11, 'such', 0, 2, 0, 0),
	(12, 'way', 0, 1, 0, 0),
	(13, 'that', 1, 16, 0, 0),
	(14, 'it', 1, 18, 0, 0),
	(15, 'does', 1, 3, 0, 0),
	(16, 'not', 3, 13, 0, 0),
	(17, 'depend', 0, 1, 0, 0),
	(18, 'on', 1, 8, 0, 0),
	(19, 'any', 0, 6, 0, 0),
	(20, 'hardware', 0, 1, 0, 0),
	(21, 'or', 1, 8, 0, 0),
	(22, 'software', 0, 1, 0, 0),
	(23, 'due', 0, 2, 0, 0),
	(24, 'to', 2, 17, 0, 0),
	(25, 'the', 12, 22, 0, 0),
	(26, 'fact', 0, 1, 0, 0),
	(27, 'compiler', 0, 2, 0, 0),
	(28, 'compiles', 0, 1, 0, 0),
	(29, 'code', 0, 6, 0, 0),
	(30, 'and', 10, 18, 0, 0),
	(31, 'then', 1, 7, 0, 0),
	(32, 'converts', 0, 1, 0, 0),
	(33, 'byte', 0, 2, 0, 0),
	(34, 'which', 0, 3, 0, 0),
	(35, 'can', 6, 13, 0, 0),
	(36, 'be', 5, 15, 0, 0),
	(37, 'run', 0, 4, 0, 0),
	(38, 'multiple', 0, 4, 0, 0),
	(39, 'systems', 0, 1, 0, 0),
	(40, 'only', 0, 8, 0, 0),
	(41, 'condition', 0, 1, 0, 0),
	(42, 'for', 0, 13, 0, 0),
	(43, 'machine', 0, 2, 0, 0),
	(44, 'have', 1, 9, 0, 0),
	(45, 'runtime', 0, 4, 0, 0),
	(46, 'environment', 0, 2, 0, 0),
	(47, 'jre', 0, 2, 0, 0),
	(48, 'installed', 0, 1, 0, 0),
	(49, 'core', 0, 0, 3, 3),
	(50, 'pure', 1, 2, 0, 0),
	(51, 'object', 2, 8, 0, 0),
	(52, 'oriented', 2, 2, 0, 0),
	(53, 'supports', 0, 2, 0, 0),
	(54, 'primitive', 0, 2, 0, 0),
	(55, 'data', 0, 6, 0, 0),
	(56, 'types', 0, 4, 0, 0),
	(57, 'boolean', 0, 3, 0, 0),
	(58, 'char', 0, 3, 0, 0),
	(59, 'short', 0, 1, 0, 0),
	(60, 'int', 0, 11, 0, 0),
	(61, 'float', 0, 3, 0, 0),
	(62, 'long', 0, 1, 0, 0),
	(63, 'double', 0, 5, 0, 0),
	(64, 'hence', 0, 3, 0, 0),
	(65, 'difference', 3, 2, 0, 0),
	(66, 'between', 3, 1, 0, 0),
	(67, 'heap', 2, 2, 0, 0),
	(68, 'stack', 2, 2, 0, 0),
	(69, 'memory', 2, 8, 0, 0),
	(70, 'how', 3, 0, 0, 0),
	(71, 'utilizes', 1, 1, 0, 0),
	(72, 'this', 1, 8, 0, 0),
	(73, 'portion', 0, 1, 0, 0),
	(74, 'of', 6, 19, 0, 0),
	(75, 'was', 0, 2, 0, 0),
	(76, 'assigned', 1, 3, 0, 0),
	(77, 'every', 0, 1, 0, 0),
	(78, 'individual', 0, 1, 0, 0),
	(79, 'program', 1, 8, 0, 0),
	(80, 'fixed', 0, 2, 0, 0),
	(81, 'other', 0, 5, 0, 0),
	(82, 'hand', 0, 1, 0, 0),
	(83, 'allocated', 0, 1, 0, 0),
	(84, 'but', 0, 10, 0, 0),
	(85, 'will', 1, 12, 0, 0),
	(86, 'available', 0, 1, 0, 0),
	(87, 'use', 3, 5, 0, 0),
	(88, 'by', 2, 12, 0, 0),
	(89, 'when', 1, 5, 0, 0),
	(90, 'required', 0, 3, 0, 0),
	(91, 'mostly', 0, 1, 0, 0),
	(92, 'during', 0, 3, 0, 0),
	(93, 'we', 0, 9, 0, 0),
	(94, 'write', 0, 2, 0, 0),
	(95, 'all', 0, 5, 0, 0),
	(96, 'variables', 2, 6, 0, 0),
	(97, 'methods', 3, 10, 0, 0),
	(98, 'etc', 0, 5, 0, 0),
	(99, 'are', 3, 15, 0, 0),
	(100, 'stored', 0, 2, 0, 0),
	(101, 'create', 0, 4, 0, 0),
	(102, 'created', 0, 2, 0, 0),
	(103, 'referenced', 0, 1, 0, 0),
	(104, 'from', 1, 3, 0, 0),
	(105, 'class', 1, 14, 0, 0),
	(106, 'main', 2, 6, 0, 0),
	(107, 'public', 0, 9, 0, 0),
	(108, 'void', 0, 7, 0, 0),
	(109, 'printarray', 0, 1, 0, 0),
	(110, 'array', 0, 3, 0, 0),
	(111, 'i', 0, 4, 0, 0),
	(112, 'system', 0, 8, 0, 0),
	(113, 'out', 0, 7, 0, 0),
	(114, 'println', 0, 7, 0, 0),
	(115, 'static', 3, 8, 0, 0),
	(116, 'string', 0, 8, 0, 0),
	(117, 'args', 0, 5, 0, 0),
	(118, 'new', 0, 4, 0, 0),
	(119, '10', 0, 2, 0, 0),
	(120, 'method', 4, 10, 0, 0),
	(121, 'area', 0, 2, 0, 0),
	(122, 'well', 0, 3, 0, 0),
	(123, 'declared', 1, 3, 0, 0),
	(124, 'also', 0, 4, 0, 0),
	(125, 'integer', 0, 3, 0, 0),
	(126, 'size', 0, 1, 0, 0),
	(127, 'because', 0, 7, 0, 0),
	(128, 'space', 0, 2, 0, 0),
	(129, 'said', 1, 0, 0, 0),
	(130, 'complete', 1, 1, 0, 0),
	(131, 'programming', 1, 2, 0, 0),
	(132, 'wrong', 0, 1, 0, 0),
	(133, 'if', 1, 10, 0, 0),
	(134, 'claim', 0, 1, 0, 0),
	(135, 'everything', 0, 1, 0, 0),
	(136, 'under', 0, 1, 0, 0),
	(137, 'classes', 1, 7, 0, 0),
	(138, 'access', 0, 4, 0, 0),
	(139, 'creating', 0, 2, 0, 0),
	(140, 'objects', 0, 5, 0, 0),
	(141, 'say', 0, 1, 0, 0),
	(142, 'completely', 0, 1, 0, 0),
	(143, 'has', 0, 4, 0, 0),
	(144, 'support', 0, 2, 0, 0),
	(145, 'like', 0, 4, 0, 0),
	(146, 'now', 0, 3, 0, 0),
	(147, 'question', 0, 1, 0, 0),
	(148, 'direct', 0, 1, 0, 0),
	(149, 'these', 0, 5, 0, 0),
	(150, 'dont', 0, 3, 0, 0),
	(151, 'directly', 0, 3, 0, 0),
	(152, 'belong', 0, 2, 0, 0),
	(153, 'different', 1, 3, 0, 0),
	(154, 'c', 2, 1, 0, 0),
	(155, 'compiled', 0, 1, 0, 0),
	(156, 'whereas', 0, 2, 0, 0),
	(157, 'an', 2, 6, 0, 0),
	(158, 'interpreted', 0, 1, 0, 0),
	(159, 'programs', 0, 1, 0, 0),
	(160, 'allows', 0, 1, 0, 0),
	(161, 'users', 0, 2, 0, 0),
	(162, 'pointers', 1, 2, 0, 0),
	(163, 'doesnt', 0, 2, 0, 0),
	(164, 'allow', 0, 1, 0, 0),
	(165, 'internally', 0, 2, 0, 0),
	(166, 'uses', 0, 2, 0, 0),
	(167, 'concept', 1, 2, 0, 0),
	(168, 'inheritances', 0, 1, 0, 0),
	(169, 'avoiding', 0, 1, 0, 0),
	(170, 'complexity', 0, 1, 0, 0),
	(171, 'name', 0, 6, 0, 0),
	(172, 'ambiguity', 0, 1, 0, 0),
	(173, 'causes', 0, 1, 0, 0),
	(174, 'diamond', 0, 1, 0, 0),
	(175, 'problem', 0, 1, 0, 0),
	(176, 'used', 1, 5, 0, 0),
	(177, 'make', 1, 2, 0, 0),
	(178, 'quite', 0, 1, 0, 0),
	(179, 'complicated', 0, 1, 0, 0),
	(180, 'unsafe', 0, 1, 0, 0),
	(181, 'beginner', 0, 1, 0, 0),
	(182, 'programmers', 0, 1, 0, 0),
	(183, 'focuses', 0, 1, 0, 0),
	(184, 'simplicity', 0, 1, 0, 0),
	(185, 'usage', 0, 2, 0, 0),
	(186, 'challenging', 0, 1, 0, 0),
	(187, 'pointer', 0, 1, 0, 0),
	(188, 'utilization', 0, 2, 0, 0),
	(189, 'cause', 0, 1, 0, 0),
	(190, 'potential', 0, 1, 0, 0),
	(191, 'errors', 0, 2, 0, 0),
	(192, 'moreover', 0, 1, 0, 0),
	(193, 'security', 0, 1, 0, 0),
	(194, 'compromised', 0, 1, 0, 0),
	(195, 'with', 0, 8, 0, 0),
	(196, 'help', 0, 3, 0, 0),
	(197, 'thus', 0, 1, 0, 0),
	(198, 'certain', 0, 1, 0, 0),
	(199, 'level', 0, 1, 0, 0),
	(200, 'abstraction', 0, 1, 0, 0),
	(201, 'furnished', 0, 1, 0, 0),
	(202, 'including', 0, 1, 0, 0),
	(203, 'procedure', 0, 1, 0, 0),
	(204, 'garbage', 2, 2, 0, 0),
	(205, 'collection', 2, 2, 0, 0),
	(206, 'slow', 0, 1, 0, 0),
	(207, 'erroneous', 0, 1, 0, 0),
	(208, 'makes', 0, 1, 0, 0),
	(209, 'references', 0, 2, 0, 0),
	(210, 'cannot', 0, 4, 0, 0),
	(211, 'manipulated', 0, 1, 0, 0),
	(212, 'unlike', 0, 1, 0, 0),
	(213, 'what', 6, 1, 0, 0),
	(214, 'do', 2, 2, 0, 0),
	(215, 'you', 3, 1, 0, 0),
	(216, 'understand', 1, 1, 0, 0),
	(217, 'instance', 1, 2, 0, 0),
	(218, 'variable', 2, 5, 0, 0),
	(219, 'local', 1, 1, 0, 0),
	(220, 'those', 0, 4, 0, 0),
	(221, 'accessible', 0, 1, 0, 0),
	(222, 'they', 0, 4, 0, 0),
	(223, 'outside', 0, 1, 0, 0),
	(224, 'inside', 0, 4, 0, 0),
	(225, 'describe', 0, 1, 0, 0),
	(226, 'properties', 0, 1, 0, 0),
	(227, 'remain', 0, 1, 0, 0),
	(228, 'bound', 0, 1, 0, 0),
	(229, 'at', 0, 5, 0, 0),
	(230, 'cost', 0, 1, 0, 0),
	(231, 'their', 0, 2, 0, 0),
	(232, 'copy', 1, 2, 0, 0),
	(233, 'modification', 0, 1, 0, 0),
	(234, 'done', 0, 4, 0, 0),
	(235, 'impacted', 0, 1, 0, 0),
	(236, 'instances', 1, 1, 0, 0),
	(237, 'continue', 0, 1, 0, 0),
	(238, 'unaffected', 0, 1, 0, 0),
	(239, 'athlete', 0, 2, 0, 0),
	(240, 'athletename', 0, 1, 0, 0),
	(241, 'athletespeed', 0, 1, 0, 0),
	(242, 'athleteage', 0, 1, 0, 0),
	(243, 'present', 0, 4, 0, 0),
	(244, 'within', 0, 1, 0, 0),
	(245, 'block', 1, 3, 0, 0),
	(246, 'function', 1, 1, 0, 0),
	(247, 'constructor', 1, 5, 0, 0),
	(248, 'accessed', 0, 1, 0, 0),
	(249, 'them', 0, 2, 0, 0),
	(250, 'restricted', 0, 2, 0, 0),
	(251, 'scope', 0, 1, 0, 0),
	(252, 'whenever', 0, 2, 0, 0),
	(253, 'knowledge', 0, 1, 0, 0),
	(254, 'about', 0, 2, 0, 0),
	(255, 'default', 1, 2, 0, 0),
	(256, 'values', 1, 3, 0, 0),
	(257, 'there', 0, 5, 0, 0),
	(258, 'no', 0, 6, 0, 0),
	(259, 'need', 0, 3, 0, 0),
	(260, 'initialize', 0, 1, 0, 0),
	(261, 'value', 0, 5, 0, 0),
	(262, 'before', 0, 2, 0, 0),
	(263, 'using', 0, 4, 0, 0),
	(264, 'otherwise', 0, 1, 0, 0),
	(265, 'throw', 0, 2, 0, 0),
	(266, 'compilation', 0, 2, 0, 0),
	(267, 'error', 0, 5, 0, 0),
	(268, 'might', 0, 2, 0, 0),
	(269, 'initialized', 0, 2, 0, 0),
	(270, 'depending', 0, 2, 0, 0),
	(271, 'type', 0, 4, 0, 0),
	(272, 'reference', 0, 2, 0, 0),
	(273, 'null', 0, 2, 0, 0),
	(274, 'numeric', 0, 1, 0, 0),
	(275, 'assign', 0, 1, 0, 0),
	(276, '0', 0, 2, 0, 0),
	(277, 'false', 0, 1, 0, 0),
	(278, 'tell', 1, 0, 0, 0),
	(279, 'equals', 1, 1, 0, 0),
	(280, 'equality', 1, 1, 0, 0),
	(281, 'operator', 1, 1, 0, 0),
	(282, 'already', 0, 3, 0, 0),
	(283, 'aware', 0, 1, 0, 0),
	(284, 'compare', 0, 1, 0, 0),
	(285, 'talk', 0, 1, 0, 0),
	(286, 'terms', 0, 1, 0, 0),
	(287, 'deal', 0, 1, 0, 0),
	(288, 'form', 0, 1, 0, 0),
	(289, 'may', 0, 1, 0, 0),
	(290, 'contain', 0, 1, 0, 0),
	(291, 'so', 0, 4, 0, 0),
	(292, 'work', 0, 1, 0, 0),
	(293, 'case', 1, 1, 0, 0),
	(294, 'go', 0, 1, 0, 0),
	(295, 'both', 0, 2, 0, 0),
	(296, 'primary', 0, 1, 0, 0),
	(297, 'functionalities', 0, 1, 0, 0),
	(298, 'secondary', 0, 1, 0, 0),
	(299, 'functionality', 0, 1, 0, 0),
	(300, 'order', 0, 1, 0, 0),
	(301, 'better', 0, 1, 0, 0),
	(302, 'lets', 0, 3, 0, 0),
	(303, 'consider', 0, 3, 0, 0),
	(304, 'example', 0, 7, 0, 0),
	(305, 'str1', 0, 1, 0, 0),
	(306, 'interviewbit', 0, 3, 0, 0),
	(307, 'str2', 0, 1, 0, 0),
	(308, 'print', 0, 1, 0, 0),
	(309, 'true', 0, 2, 0, 0),
	(310, 'know', 0, 1, 0, 0),
	(311, 'strings', 0, 1, 0, 0),
	(312, 'here', 0, 3, 0, 0),
	(313, 'operators', 0, 1, 0, 0),
	(314, 'each', 0, 1, 0, 0),
	(315, 'character', 0, 2, 0, 0),
	(316, 'compares', 0, 1, 0, 0),
	(317, 'location', 0, 2, 0, 0),
	(318, 'constant', 0, 1, 0, 0),
	(319, 'pool', 0, 1, 0, 0),
	(320, 'storing', 0, 1, 0, 0),
	(321, 'same', 1, 7, 0, 0),
	(322, 'modify', 0, 1, 0, 0),
	(323, 'little', 0, 1, 0, 0),
	(324, 'bit', 0, 1, 0, 0),
	(325, 'defined', 0, 2, 0, 0),
	(326, 'binary', 0, 1, 0, 0),
	(327, 'override', 0, 1, 0, 0),
	(328, 'our', 0, 1, 0, 0),
	(329, 'custom', 0, 1, 0, 0),
	(330, 'comparison', 0, 1, 0, 0),
	(331, 'modified', 0, 2, 0, 0),
	(332, 'always', 0, 1, 0, 0),
	(333, 'hashcode', 0, 1, 0, 0),
	(334, 'checking', 0, 1, 0, 0),
	(335, 'contents', 0, 1, 0, 0),
	(336, 'two', 0, 3, 0, 0),
	(337, 'per', 0, 1, 0, 0),
	(338, 'specified', 0, 1, 0, 0),
	(339, 'business', 0, 2, 0, 0),
	(340, 'logic', 0, 2, 0, 0),
	(341, 'comparing', 0, 1, 0, 0),
	(342, 'addresses', 0, 1, 0, 0),
	(343, 'e', 0, 1, 0, 0),
	(344, 'checks', 0, 1, 0, 0),
	(345, 'pointing', 0, 1, 0, 0),
	(346, 'infinite', 1, 1, 0, 0),
	(347, 'loop', 1, 1, 0, 0),
	(348, 'loops', 0, 1, 0, 0),
	(349, 'infinitely', 0, 1, 0, 0),
	(350, 'without', 0, 1, 0, 0),
	(351, 'breaking', 0, 1, 0, 0),
	(352, 'conditions', 0, 1, 0, 0),
	(353, 'some', 0, 2, 0, 0),
	(354, 'examples', 1, 1, 0, 0),
	(355, 'consciously', 0, 1, 0, 0),
	(356, 'declaring', 0, 1, 0, 0),
	(357, 'break', 0, 1, 0, 0),
	(358, 'while', 0, 1, 0, 0),
	(359, 'briefly', 1, 0, 0, 0),
	(360, 'explain', 2, 0, 0, 0),
	(361, 'overloading', 2, 2, 0, 0),
	(362, 'process', 1, 2, 0, 0),
	(363, 'constructors', 0, 2, 0, 0),
	(364, 'consisting', 0, 2, 0, 0),
	(365, 'parameters', 0, 3, 0, 0),
	(366, 'upon', 0, 1, 0, 0),
	(367, 'number', 0, 3, 0, 0),
	(368, 'corresponding', 0, 1, 0, 0),
	(369, 'distinguishing', 0, 1, 0, 0),
	(370, 'hospital', 0, 1, 0, 0),
	(371, 'variable1', 0, 1, 0, 0),
	(372, 'variable2', 0, 1, 0, 0),
	(373, 'variable3', 0, 1, 0, 0),
	(374, 'doctors', 0, 1, 0, 0),
	(375, 'nurses', 0, 1, 0, 0),
	(376, 'salaries', 0, 1, 0, 0),
	(377, 'three', 0, 1, 0, 0),
	(378, 'differ', 0, 2, 0, 0),
	(379, 'basis', 0, 1, 0, 0),
	(380, 'parameter', 0, 1, 0, 0),
	(381, 'numbers', 0, 1, 0, 0),
	(382, 'overloaded', 2, 1, 0, 0),
	(383, 'yes', 1, 3, 0, 0),
	(384, 'possible', 1, 3, 0, 0),
	(385, 'overload', 0, 1, 0, 0),
	(386, 'many', 0, 1, 0, 0),
	(387, 'want', 0, 1, 0, 0),
	(388, 'however', 0, 1, 0, 0),
	(389, 'jvm', 0, 2, 0, 0),
	(390, 'predefined', 0, 1, 0, 0),
	(391, 'calling', 0, 1, 0, 0),
	(392, 'call', 0, 3, 0, 0),
	(393, 'definition', 0, 1, 0, 0),
	(394, 'below', 0, 1, 0, 0),
	(395, 'snippets', 0, 2, 0, 0),
	(396, 'comment', 1, 0, 0, 0),
	(397, 'overriding', 1, 3, 0, 0),
	(398, 'citing', 1, 0, 0, 0),
	(399, 'relevant', 1, 0, 0, 0),
	(400, 'made', 0, 1, 0, 0),
	(401, 'introducing', 0, 1, 0, 0),
	(402, 'still', 0, 1, 0, 0),
	(403, 'functions', 0, 2, 0, 0),
	(404, 'takes', 0, 1, 0, 0),
	(405, 'place', 0, 2, 0, 0),
	(406, 'enhances', 0, 1, 0, 0),
	(407, 'readability', 0, 1, 0, 0),
	(408, 'return', 0, 2, 0, 0),
	(409, 'promote', 0, 1, 0, 0),
	(410, 'following', 0, 2, 0, 0),
	(411, 'furnish', 0, 1, 0, 0),
	(412, 'clear', 0, 1, 0, 0),
	(413, 'picture', 0, 1, 0, 0),
	(414, 'overloadinghelp', 0, 1, 0, 0),
	(415, 'findarea', 0, 1, 0, 0),
	(416, 'l', 0, 1, 0, 0),
	(417, 'b', 0, 1, 0, 0),
	(418, 'var1', 0, 1, 0, 0),
	(419, 'h', 0, 1, 0, 0),
	(420, 'var2', 0, 1, 0, 0),
	(421, 'arguments', 0, 1, 0, 0),
	(422, 'first', 0, 1, 0, 0),
	(423, 'calculates', 0, 1, 0, 0),
	(424, 'rectangle', 0, 2, 0, 0),
	(425, 'second', 0, 2, 0, 0),
	(426, 'cuboid', 0, 1, 0, 0),
	(427, 'having', 0, 2, 0, 0),
	(428, 'signature', 0, 2, 0, 0),
	(429, 'inheritance', 0, 2, 0, 0),
	(430, 'relationship', 0, 1, 0, 0),
	(431, 'particular', 0, 1, 0, 0),
	(432, 'implementation', 0, 1, 0, 0),
	(433, 'base', 0, 1, 0, 0),
	(434, 'derived', 0, 1, 0, 0),
	(435, 'give', 0, 1, 0, 0),
	(436, 'look', 0, 1, 0, 0),
	(437, 'humanbeing', 0, 1, 0, 0),
	(438, 'walk', 0, 1, 0, 0),
	(439, 'distance', 0, 1, 0, 0),
	(440, 'time', 0, 3, 0, 0),
	(441, 'speed', 0, 1, 0, 0),
	(442, 'extends', 0, 2, 0, 0),
	(443, '2', 0, 2, 0, 0),
	(444, 'final', 2, 4, 0, 0),
	(445, 'keyword', 2, 2, 0, 0),
	(446, 'cant', 0, 2, 0, 0),
	(447, 'once', 0, 2, 0, 0),
	(448, 'been', 0, 2, 0, 0),
	(449, 'overridden', 1, 3, 0, 0),
	(450, 'its', 0, 3, 0, 0),
	(451, 'childrens', 0, 1, 0, 0),
	(452, 'marked', 0, 1, 0, 0),
	(453, 'inherited', 0, 1, 0, 0),
	(454, 'marking', 0, 1, 0, 0),
	(455, 'sense', 0, 1, 0, 0),
	(456, 'throws', 0, 1, 0, 0),
	(457, 'saying', 0, 2, 0, 0),
	(458, 'modifier', 0, 1, 0, 0),
	(459, 'allowed', 0, 2, 0, 0),
	(460, 'extend', 0, 1, 0, 0),
	(461, 'finally', 2, 2, 0, 0),
	(462, 'finalize', 1, 1, 0, 0),
	(463, 'keywords', 1, 0, 0, 0),
	(464, 'restriction', 0, 1, 0, 0),
	(465, 'comes', 0, 1, 0, 0),
	(466, 'handy', 0, 1, 0, 0),
	(467, 'becomes', 0, 1, 0, 0),
	(468, 'after', 0, 2, 0, 0),
	(469, 'incorporating', 0, 1, 0, 0),
	(470, '100', 0, 1, 0, 0),
	(471, 'statement', 0, 2, 0, 0),
	(472, 'where', 0, 2, 0, 0),
	(473, 'codes', 0, 2, 0, 0),
	(474, 'written', 0, 1, 0, 0),
	(475, 'get', 0, 4, 0, 0),
	(476, 'executed', 1, 2, 0, 0),
	(477, 'irrespective', 0, 1, 0, 0),
	(478, 'handling', 0, 1, 0, 0),
	(479, 'exceptions', 0, 1, 0, 0),
	(480, 'try', 0, 1, 0, 0),
	(481, '5', 0, 3, 0, 0),
	(482, 'catch', 0, 1, 0, 0),
	(483, 'exception', 0, 1, 0, 0),
	(484, 'occurred', 0, 1, 0, 0),
	(485, 'execution', 0, 2, 0, 0),
	(486, 'prior', 0, 1, 0, 0),
	(487, 'called', 0, 3, 0, 0),
	(488, 'clean', 0, 2, 0, 0),
	(489, 'up', 0, 3, 0, 0),
	(490, 'activity', 0, 1, 0, 0),
	(491, 'implemented', 0, 1, 0, 0),
	(492, 'gc', 0, 2, 0, 0),
	(493, 'collector', 0, 1, 0, 0),
	(494, 'list', 1, 0, 0, 0),
	(495, 'cases', 0, 3, 0, 0),
	(496, 'suppose', 0, 1, 0, 0),
	(497, 'exit', 0, 1, 0, 0),
	(498, 'above', 0, 3, 0, 0),
	(499, 'fatal', 0, 1, 0, 0),
	(500, 'overflow', 0, 1, 0, 0),
	(501, 'identify', 1, 0, 0, 0),
	(502, 'output', 1, 1, 0, 0),
	(503, 'state', 1, 0, 0, 0),
	(504, 'reason', 1, 0, 0, 0),
	(505, '20', 0, 2, 0, 0),
	(506, 'j', 0, 1, 0, 0),
	(507, '30', 0, 1, 0, 0),
	(508, 'generate', 0, 1, 0, 0),
	(509, 'compile', 0, 2, 0, 0),
	(510, 'line', 0, 2, 0, 0),
	(511, '7', 0, 1, 0, 0),
	(512, 'super', 1, 1, 0, 0),
	(513, 'hidden', 0, 1, 0, 0),
	(514, 'fields', 0, 1, 0, 0),
	(515, 'attributes', 0, 1, 0, 0),
	(516, 'parent', 0, 1, 0, 0),
	(517, 'accessing', 0, 1, 0, 0),
	(518, 'members', 0, 2, 0, 0),
	(519, 'member', 0, 1, 0, 0),
	(520, 'names', 0, 2, 0, 0),
	(521, 'child', 0, 1, 0, 0),
	(522, 'subclasses', 0, 1, 0, 0),
	(523, 'parameterized', 0, 1, 0, 0),
	(524, 'demonstrates', 0, 1, 0, 0),
	(525, '3', 0, 2, 0, 0),
	(526, 'protected', 0, 1, 0, 0),
	(527, 'num', 0, 1, 0, 0),
	(528, '1', 0, 2, 0, 0),
	(529, 'x', 0, 1, 0, 0),
	(530, 'parameterised', 0, 1, 0, 0),
	(531, 'foo', 0, 1, 0, 0),
	(532, 'private', 0, 1, 0, 0),
	(533, 'printnum', 0, 1, 0, 0),
	(534, 'prints', 0, 1, 0, 0),
	(535, '@override', 0, 1, 0, 0),
	(536, 'calls', 0, 1, 0, 0),
	(537, 'overriden', 0, 1, 0, 0),
	(538, 'more', 0, 1, 0, 0),
	(539, 'differing', 0, 1, 0, 0),
	(540, 'input', 0, 2, 0, 0),
	(541, 'declaration', 0, 1, 0, 0),
	(542, 'subclass', 0, 1, 0, 0),
	(543, 'polymorphism', 0, 1, 0, 0),
	(544, 'take', 0, 1, 0, 0),
	(545, 'dynamic', 0, 1, 0, 0),
	(546, 'occurs', 0, 1, 0, 0),
	(547, 'loaded', 0, 3, 0, 0),
	(548, 'looked', 0, 1, 0, 0),
	(549, 'statically', 0, 1, 0, 0),
	(550, 'gets', 0, 1, 0, 0),
	(551, 'mathematical', 0, 1, 0, 0),
	(552, 'max', 0, 1, 0, 0),
	(553, 'min', 0, 1, 0, 0),
	(554, 'sqrt', 0, 1, 0, 0),
	(555, 'pow', 0, 1, 0, 0),
	(556, 'notice', 0, 1, 0, 0),
	(557, 'find', 0, 1, 0, 0),
	(558, 'math', 0, 1, 0, 0),
	(559, 'similarly', 0, 1, 0, 0),
	(560, 'length', 0, 2, 0, 0),
	(561, 'except', 0, 1, 0, 0),
	(562, 'inner', 0, 1, 0, 0),
	(563, 'exactly', 0, 1, 0, 0),
	(564, 'works', 0, 1, 0, 0),
	(565, 'objective', 1, 1, 0, 0),
	(566, 'free', 0, 1, 0, 0),
	(567, 'occupied', 0, 1, 0, 0),
	(568, 'unnecessary', 0, 1, 0, 0),
	(569, 'unreachable', 0, 1, 0, 0),
	(570, 'deleting', 0, 1, 0, 0),
	(571, 'ensures', 0, 1, 0, 0),
	(572, 'resource', 0, 1, 0, 0),
	(573, 'efficiently', 0, 1, 0, 0),
	(574, 'provides', 0, 1, 0, 0),
	(575, 'guarantee', 0, 1, 0, 0),
	(576, 'would', 0, 1, 0, 0),
	(577, 'sufficient', 0, 1, 0, 0),
	(578, 'classloader', 1, 1, 0, 0),
	(579, 'belongs', 0, 1, 0, 0),
	(580, 'task', 0, 1, 0, 0),
	(581, 'load', 0, 1, 0, 0),
	(582, 'interfaces', 0, 1, 0, 0),
	(583, 'console', 0, 1, 0, 0),
	(584, 'require', 0, 1, 0, 0),
	(585, 'scanner', 0, 1, 0, 0),
	(586, 'part', 1, 0, 0, 0),
	(587, 'cleaned', 1, 0, 0, 0),
	(588, 'shallow', 1, 1, 0, 0),
	(589, 'deep', 1, 1, 0, 0),
	(590, 'several', 0, 1, 0, 0),
	(591, 'breadth', 0, 1, 0, 0),
	(592, 'obj1', 0, 1, 0, 0),
	(593, 'creates', 0, 1, 0, 0),
	(594, 'points', 0, 1, 0, 0),
	(595, 'obj2', 0, 1, 0, 0),
	(596, 'doing', 0, 1, 0, 0),
	(597, 'happen', 0, 1, 0, 0),
	(598, 'point', 0, 1, 0, 0),
	(599, 'old', 0, 1, 0, 0),
	(600, 'obj3', 0, 1, 0, 0),
	(601, 'change', 0, 1, 0, 0),
	(602, 'affect', 0, 1, 0, 0),
	(603, 'see', 0, 1, 0, 0),
	(604, 'changing', 0, 1, 0, 0),
	(605, 'object2', 0, 1, 0, 0),
	(606, 'object1', 0, 1, 0, 0),
	(607, 'n', 0, 1, 0, 0),
	(608, 'changed', 0, 1, 0, 0),
	(609, 'effect', 0, 1, 0, 0),
	(610, 'added', 0, 1, 0, 0),
	(611, 'snippet', 0, 1, 0, 0),
	(612, 'separate', 0, 1, 0, 0),
	(613, 'reduce', 0, 1, 0, 0),
	(614, 'clone', 0, 1, 0, 0);

/*!40103 SET TIME_ZONE=IFNULL(@OLD_TIME_ZONE, 'system') */;
/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;
/*!40014 SET FOREIGN_KEY_CHECKS=IFNULL(@OLD_FOREIGN_KEY_CHECKS, 1) */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40111 SET SQL_NOTES=IFNULL(@OLD_SQL_NOTES, 1) */;
